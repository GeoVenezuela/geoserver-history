- in feature request and all others, find a method of 'executing' the
	request prior to any treatment of response.getOutputStream to gracefully
	catch exceptions and still be able of sending exception reports
	
- throw friendly exception if a request was made when the server
  did not finished starting up
- initialize datasores at startup time
- xxxmake FeatureTransformer write inner rings in polygons DONE with IanS's stuff
- manejar multiples queries (queries sobre multiples datasources)

- get transactions working again.
- revisit configuration files.
- getBounds working with postgis.
- xxxroll the geotools files in the geoserver source tree back into geotools.
  (FeatureTransformer and FeatureResultsIteration
- roll web-inf hiding of configuration here (on 1.0.1 branch)
- locking.
- xxxMaxFeatures working. (needs a bit more work)
- test with resin 3
- get zserver working with resin.
- TEST, TEST, TEST! more unit tests in geoserver, full cite suite.

- error reporting for configuration should try to have reference to the file
  it is ready, for cases when user may be confused as to the location of the 
  file.
- roll geos in.  Auto-detect its presence.
- xxxget user configured logging working again. 
- Not sure if each namespace should only be used for one datastore.  I would 
  like default namespace to be used for datastores that don't have a namepace
  defined.  But then we need some way to make sure that typeNames don't 
  collide.
- xxxGetCapabilities should not choke if datastores are not enabled.
  (probably need an enabled thing in featureTypes).
- xxxUse IanS's new gml producer.

- Evaluate using cactus (http://jakarta.apache.org/cactus) to make server-side unit tests
- update all that empty javadoc comments, at least in the services hierarchy, wich seems
	to be pretty good
- figure out how to configure hierarchy layers for wms
- create wms services, and isolate wms map creation from request processing, allowing

xxx- FeatureTransformer handle null atts.DONE
- Put namespace prefix stripper in common utility.  Have kvpRequestReader 
  and query use it.
- Make option to buffer the output stream responses so that we can properly
  report errors.  Users can then choose compliance or speed, as to be 
  compliant we must report all errors, but that kills the speed gains
  of not holding the whole response string in memory.
	for content type extensions
- Exception handling: I've enabled full stack traces in response for most
  errors.  What I'd like to see is most all classes try to only throw
  ServiceExceptions, so that user configuration and other expected errors
  are wrapped, and report themselves back as one line, while ones that are
  the result of programming errors send themselves as full stack traces, so 
  that it's easier for us to get at the problem.
