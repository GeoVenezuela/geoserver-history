<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
  <title>Install Documentation</title>

  <sect1 id="welcome">
    <title>Welcome</title>

    <para>The GeoServer project is a Java implementation of the 1.0 Web
    Feature Server specification from the <ulink
    url="http://www.opengis.org">OpenGIS Consortium</ulink>. GeoServer aspires
    to be the <ulink url="http://www.apache.org">Apache</ulink> of OpenGIS
    data serving and its mission is to enable greater geographic
    interoperability by enforcing OpenGIS standards and lowering the barriers
    to entry for geographic data providers.</para>

    <para>Before you can use GeoServer, you must successfully install <ulink
    url="http://java.sun.com">Java</ulink>, and a Java Servlet container such
    as <ulink url="http://jakarta.apache.org/tomcat/">Tomcat</ulink> or <ulink
    url="http://jetty.mortbay.com">Jetty</ulink>. A spatially enabled
    database, such as the freely available <ulink
    url="http://postgis.refractions.net">PostGIS</ulink>, is also recommended,
    but GeoServer will work with Shapefiles. This is by far the hardest part
    of the installation process, but the documentation to install these
    components is quite good. Our testing has occurred on JDK 1.4.1 or 1.4.2,
    Tomcat 5.0.19, Resin 2.1.13 or Jetty 4.1.27, and PostGIS 0.8.1 with GEOS
    on top of Postgresql 7.4. <ulink url="http://ant.apache.org"></ulink>The
    latest stable versions of these components should work fine. This document
    assumes you are working with the downloaded
    <emphasis>geoserver.war</emphasis> file. If you wish to work with the
    source download please consult the developers build document</para>

    <para>GeoServer has an active user community that you can engage by
    joining the GeoServer <ulink
    url="https://sourceforge.net/mail/?group_id=25086">mailing list</ulink>
    and asking questions or making suggestions.If you create a user account at
    this site, you may participate in forums and vote in polls as well. We
    also strongly encourage you to submit bugs and improvements you would like
    to see to our <ulink
    url="http://jira.codehaus.org/secure/BrowseProject.jspa?id=10311">tracker</ulink>,
    as the only way we can improve GeoServer is with your feedback. You will
    have to create an account to use it, but your email address will not be
    used except to notify you when your issue is worked on.</para>
  </sect1>

  <sect1 id="java">
    <title>Installing Java</title>

    <para>GeoServer is built against the <ulink
    url="http://java.sun.com/j2se/1.4/">JDK1.4</ulink>. If you do not have the
    JDK1.4 installed on your machine, you should download it from Sun and
    point to the root install directory with the JAVA_HOME environment
    variable (set JAVA_HOME = C:\j2sdk1.4.2). Most of our testing occurred
    against JDK1.4.2. If your not sure if you have java, or not sure what
    version, type <emphasis>java -version</emphasis> from the command line. If
    the command doesn't work or if the version is less than 1.4 then you'll
    have to download, install, and set JAVA_HOME</para>
  </sect1>

  <sect1 id="servlet">
    <title>Installing a Servlet Container</title>

    <para>Several good open source, free servlet containers and a bevy of
    commercial ones exist on the market. We recommend <ulink
    url="http://www.caucho.com">Jetty</ulink> (open source, free to
    non-commercial users) or <ulink
    url="http://jakarta.apache.org/tomcat/index.html">Tomcat</ulink> (open
    source, free). Most GeoServer testing has occurred on Tomcat, which is
    remarkably simple to set up and administer. The servlet containers should
    have good documentation, so we shall say nothing further here about the
    install. We do recommend sticking with the latest stable versions. For
    more information on GeoServer working with specific containers see our
    <ulink url="???">Servlet Container Reports</ulink>, and please add
    additional feedback to the page (it's a wiki). </para>
  </sect1>

  <sect1 id="database">
    <title>Installing a Database</title>

    <para>The GeoServer project currently supports the Oracle, ArcSDE and
    Shapefile data formats, but unless you already have a running Oracle or
    ArcSDE installation we recommend PostGIS, an excellent extension of the
    venerable Postgresql relational database. <ulink
    url="http://postgis.refractions.net">PostGIS</ulink> and <ulink
    url="http://www.postgresql.org/">Postgresql</ulink> are open source
    databases that are free to all users. Postgresql was developed at <ulink
    url="http://www.berkeley.edu">Berkeley</ulink> several years ago and
    PostGIS is a recent extension developed by the clever programmers at
    <ulink url="http://www.refractions.net/">Refractions
    Research</ulink>.</para>

    <para>If you'd just like to get an installation up and running quickly,
    and don't care so much about advanced features and speed, then we
    recommend the Shapefile format, with installation information <ulink
    url="dvanced.htm#shapefile">here</ulink>. If you have an existing Oracle
    spatial installation, and would like to use GeoServer to serve that data
    as GML, then check out the install information <ulink
    url="advanced.htm#oracle">here</ulink>. Be sure to fully read this
    installation document before trying out Oracle or Shapefile DataStores,
    even if you are not going to use PostGIS.</para>

    <para>Installing Postgresql and PostGIS is the most complicated part of
    setting up a GeoServer site and for this reason, we will supplement the
    documentation to do so a little here. First, you should download the full
    source of Postgresql. Binaries, RPMs, and other packaged builds will
    generally not suffice because you will need to compile the PostGIS
    extension and JDBC bindings into Postgresql in order for it to correctly
    speak with GeoServer.</para>

    <para>First, download Postgresql - we have had the best luck with version
    7.4. You should configure and install it, per the installation
    instructions. It should go something like this:<programlisting>./configure
gmake
gmake install</programlisting>Configuring with Java is no longer required, as
    we supply the JDBC jar with the installation. Be sure that it is up and
    running, it's best to create a database and test it using psql from the
    command line. Then, download PostGIS. You should place PostGIS in your
    Postgresql 'contrib' directory, change to the postgresql root directory
    and follow the directions for installation there. We highly recommend
    installing PostGIS 0.8 with <ulink
    url="http://geos.refractions.net/">GEOS</ulink>, as it will greatly speed
    up spatial queries. If installing GEOS be sure to read all the directions
    for it and PostGIS, as you have to configure your postgresql installation
    to make use of it.</para>

    <para>You should, of course, check to make sure that Postgresql and
    PostGIS are functioning correctly before you attempt to connect with then
    using GeoServer. After installing PostGIS attempt to create tables with
    geometry columns, and insert a few features. If you are a windows user a
    good page on installing PostGIS is available <ulink
    url="http://www.gasai.com/gisapps/WindowsHowTo.html">here</ulink>. You can
    also try out the PostGIS installer on the <ulink url="???">dcmms
    sourceforge project</ulink>, which we've had success with as well. When
    starting PostGIS be sure to run it with the -i option to allow other
    applications (i.e. GeoServer) to connect to it.</para>
  </sect1>

  <sect1 id="geoserver">
    <title>Installing GeoServer</title>

    <para>Move the distributed <emphasis>geoserver.war</emphasis> to the war
    file directory of your Java Servlet container (generally named 'webapps').
    If you have an existing GeoServer installation on your machine, you should
    backup your old <emphasis>geoserver/ </emphasis>directory before moving
    the new <emphasis>.war</emphasis> file. You may run a simple test by
    starting your container and entering this address:<programlisting>http://<emphasis
          role="bold">SERVER_ADDRESS</emphasis>:<emphasis role="bold">SERVER_PORT</emphasis>/geoserver/wfs/GetCapabilities</programlisting>Note
    that <emphasis role="bold">SERVER_ADDRESS</emphasis> and <emphasis
    role="bold">SERVER_PORT</emphasis> should be replaced by your server's
    address and port (localhost:8080 will suffice for the default of tomcat or
    resin running on your local machine). If GeoServer is running, you should
    see an WFS capabilities document. If you get nothing, then you should
    consult your server documentation to see what has gone wrong. Some modern
    browser may give a warning like: <programlisting>This XML file does not appear to have any style information associated with it. 
The document tree is shown below.</programlisting></para>

    <para>This is not an error, it is just an indication that the document is
    pure XML, without a style sheet associated, which is how a WFS should
    respond. If a <emphasis>geoserver</emphasis> directory has not been
    created automatically by your server, then your server is probably not
    behaving as it should.</para>
  </sect1>

  <sect1 id="configuration">
    <title>Configuring GeoServer</title>

    <para>GeoServer now includes a web based tool to configure and administer
    the application. It is available at the root web directory
    (http://localhost:8080/geoserver). The initial log in is user name:
    'admin' and password: 'geoserver'. After logging in you should change the
    user name and password, at Config -&gt; Server -&gt; Password. More
    information on using the web admin tool can be found in the pdf user
    guides. Also note that help text will pop up if you place your mouse over
    the fields.</para>

    <para>After logging in and changing the password the next step is to click
    on the configure link. This is the central place to configure GeoServer.
    You should work through each of the four categories, first setting your
    contact information and global values in Server, and then the WMS and WFS
    specific descriptions and contents. Contents will allow you to enable or
    disable each Service and WFS will also let you specify the transaction
    level - that is if users should be able to access the transaction
    operations. </para>

    <para>Be sure to always hit the submit button, and to then test your
    changes in GeoServer hit 'Apply' on the right. The changes you put in will
    take effect immediately. If you like the changes then hit 'Save' and they
    will be stored to disk permanently. If you do not like the changes you can
    roll back to the last saved ones by hitting 'Load'. </para>

    <para>If you want to avoid the web admin tool then directly editing the
    files shall work just as well. Your work flow will just be a bit
    different, you will work from the source tree and rebuild the war after
    you have changed the options. If you choose to use the web administration
    interface you can skip the next section, but read up on the options that
    follow, as they are in the administration tool as well.</para>

    <para>This section assumes at least passing familiarity with XML files.
    However, if you simply follow the test file example exactly, you should be
    able to create a working configuration file. The
    <emphasis>services.xml</emphasis> file resides at
    <emphasis>geoserver/WEB-INF</emphasis>. You should edit this file, and
    changes will be picked up when you run &lt;i&gt;ant war&lt;/i&gt;. This
    sets the global configuration options for your server as well as the
    service elements of the WMS and WFS services. An example
    <emphasis>services.xml</emphasis> is shown here:<programlisting>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;serverConfiguration&gt;
  &lt;global&gt;
    &lt;loggingLevel&gt;FINE&lt;/loggingLevel&gt;
    &lt;verbose value="true"&gt;
  &lt;/global&gt;
  &lt;services&gt;
    &lt;service type="WFS" enabled="true"&gt;
      &lt;name&gt;GeoServer&lt;/name&gt;
      &lt;title&gt;The TOPP Basemap Server&lt;/title&gt;
      &lt;abstract&gt;This is a test server. It contains some basemap data from New York City.&lt;/abstract&gt;
      &lt;keywords&gt;&lt;keyword&gt;New York&lt;/keyword&gt;&lt;keyword&gt;transportation&lt;/keyword&gt;&lt;/keywords&gt;
      &lt;onlineResource&gt;http://beta.vfny.org/geoserver&lt;/onlineResource&gt;  
      &lt;maintainer&gt;Vision for New York&lt;/maintainer&gt;
      &lt;gmlPrefixing value="true"/&gt;
      &lt;serviceLevel value="2"/&gt;
    &lt;/service
  &lt;/services&gt;
  &lt;namespace default="true" uri="http://www.openplans.org/topp" prefix="topp"/&gt;
  &lt;namespace uri="http://www.opengis.net/cite/data" prefix="cdf"/&gt;
&lt;/serverConfiguration&gt;</programlisting></para>

    <para>You should modify the values between the tags only. All values are
    defined below:</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <thead>
          <row>
            <entry align="center">Option Name</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>loggingLevel</entry>

            <entry>How much ouput should go to the logs, one of:
            <emphasis>SEVERE, WARNING, INFO, CONFIG, FINER,
            FINEST</emphasis></entry>
          </row>

          <row>
            <entry>URL</entry>

            <entry>The base url where geoserver will be available. If just
            testing on a local machine localhost should be fine. This is used
            in the capabilities document, which reports to clients the entry
            points for accessing features.</entry>
          </row>

          <row>
            <entry>verbose</entry>

            <entry><emphasis>true</emphasis> if the xml returned should have
            human readable formatting</entry>
          </row>

          <row>
            <entry>name</entry>

            <entry>This is the name of your server and is arbitrary.</entry>
          </row>

          <row>
            <entry>title</entry>

            <entry>This is the title of the server and is arbitrary</entry>
          </row>

          <row>
            <entry>abstract</entry>

            <entry>This is a brief description of what your server does and is
            arbitrary.</entry>
          </row>

          <row>
            <entry>keywords</entry>

            <entry>A series of comma seperated keywords, describing the data
            and purpose of the server.</entry>
          </row>

          <row>
            <entry>onlineResource</entry>

            <entry>A unique url where information for this server resides.
            Even if you have no real online source it is important to put
            something here, for default namespace surfaces. It is fine to use
            the same url as the URL element.</entry>
          </row>

          <row>
            <entry>maintainer</entry>

            <entry>The name of the maintainer for this server.</entry>
          </row>

          <row>
            <entry>gmlPrefixing</entry>

            <entry><emphasis>true</emphasis> when GML prefixing is
            required.</entry>
          </row>

          <row>
            <entry>serviceLevel</entry>

            <entry>The service level, 1 is basic, 2 is transactional.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>For more configuration options, check the <ulink
    url="advanced.htm">Advanced</ulink> section.</para>
  </sect1>

  <sect1 id="data">
    <title>Adding Data to GeoServer</title>

    <para>To add new data to GeoServer go to Config -&gt; Data. You should
    first define the GML namespace that your features should occur in. This
    distinguishes your features from others on the Internet. This is not
    necessary if you are only working with the WMS. Defining a namespace as
    the 'default' allows you to request featureTypes without prepending the
    namespace prefix, but is not used for much else. </para>

    <para>Next you need to create a DataStore. This is the GeoServer
    terminology for the source of data. It can be a database or a file, and
    can contain one or more FeatureTypes (Layers in WMS terms). In a database
    each table is a FeatureType. To define a new DataStore click on the
    'Stores' button, select the type from the list and input the appropriate
    parameters. Note that you must pick one namespace for each DataStore. If
    you really want different featureTypes in the same DataStore to be in
    different name spaces you can get around this by defining two DataStores
    with the same parameters and different names and name spaces. </para>

    <para>After creating the DataStore you may upload SLD files to serve as
    the Styles for GeoServer's WMS. For more on SLD see the <ulink
    url="???">specification</ulink>. GeoServer is working to become a true
    SLD-WMS, but for now the SLD files must be uploaded and defined using the
    web administration interface. If the WMS is not needed then no additional
    styles are needed.</para>

    <para>Finally you should create the appropriate FeatureTypes. Hitting the
    'New' button will generate a list of all the featureTypes in all the
    DataStores, in the format DataStoreID::FeatureTypeName. Pick the
    featureType to create, and then edit the meta information. If deploying
    GeoServer it is important to fill out this information accurately, as it
    appears in the capabilities document, which gives clients about the data
    available. The 'generate' button currently only works if the data itself
    is stored in Lat Long (EPSG:4326 - which you should set for the SRS if
    your data is in Lat Long). Soon we will support transformation from the
    Spatial Reference System specified into Lat Long. </para>

    <para>After hitting submit you should be able to hit 'Apply', and then the
    GetCapabilities request given earlier should include your newly added
    FeatureType. If you are just working with the web interface, you can skip
    to the next section (the file information will soon be ported to the
    developers documentation), though some of the tables may prove helpful.
    </para>

    <para>If working with files, data to geoserver is now centralized in the
    <emphasis>catalog.xml</emphasis> file, located in
    <emphasis>geoserver/WEB-INF</emphasis>. This file can be thought of as the
    central place for data in GeoServer. It contains the connection parameters
    to various DataStores, as well as style and namespace information. In
    older versions of GeoServer each featureType's
    <emphasis>info.xml</emphasis> file contained connection parameters, but
    this lead to a lot of duplication as many featureTypes are often contained
    in a single database. So now each featureType just references a DataStore
    defined in the <emphasis>catalog.xml</emphasis> file. The following sample
    <emphasis>catalog.xml</emphasis> file is for a PostGIS DataStore, as it is
    the most solid one that GeoServer supports. <ulink
    url="advanced.htm#shapefile">Shapefile</ulink>, <ulink
    url="advanced.htm#oracle">Oracle</ulink> and ArcSDE DataStores are also
    available in various degrees of maturity; click on the hyper links for
    more information.<programlisting> &lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;catalog&gt;
  &lt;!-- defines the datastores, more than one is possible --&gt;
  &lt;datastores&gt;
    &lt;datastore id="local.postgis" enabled="true" namespace="topp"&gt;
      &lt;connectionParams&gt;
        &lt;parameter name="host" value="localhost"/&gt;
        &lt;parameter name="port" value="5432"/&gt;
        &lt;parameter name="database" value="testdb"/&gt;
        &lt;parameter name="user" value="testuser"/&gt;
        &lt;parameter name="passwd" value="pass"/&gt;
        &lt;parameter name="dbtype" value="postgis"/&gt;
      &lt;/connectionParams&gt;
    &lt;/datastore&gt;
  &lt;/datastores&gt;

  &lt;!--defines the namespaces, should have at least a default --&gt;
  &lt;namespaces&gt;
    &lt;namespace default="true" uri="http://www.openplans.org/topp" prefix="topp"/&gt; 
    &lt;namespace uri="http://www.opengis.net/cite/data" prefix="cdf"/&gt;
  &lt;/namespaces&gt;
 &lt;/catalog&gt;</programlisting></para>

    <para>This file defines a DataStore, that featureTypes will reference
    using its <emphasis>local.postgis</emphasis> id. The namespace attribute
    references the prefix of the <emphasis>topp</emphasis> namespace defined
    below. The enabled attribute is used to 'turn off' the DataStore,
    featureTypes referencing it will not be accessible to users. The
    connectionParams for PostGIS should be as follows:<informaltable>
        <tgroup cols="2">
          <colspec align="left" colwidth="100" />

          <thead>
            <row>
              <entry align="center">Option Name</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>dbtype</entry>

              <entry>Must be 'PostGIS' for a PostGIS DataStore.</entry>
            </row>

            <row>
              <entry>host</entry>

              <entry>Must match the PostGIS postmaster daemon URI exactly,
              port excluded. Can be a number or name - localhost or 127.0.0.1
              if PostGIS is on the same machine as geoserver, if not it can
              reference the ip address or host name.</entry>
            </row>

            <row>
              <entry>port</entry>

              <entry>Must match the PostGIS postmaster daemon port exactly
              (generally 5432).</entry>
            </row>

            <row>
              <entry>database</entry>

              <entry>Must match the PostGIS database name exactly.</entry>
            </row>

            <row>
              <entry>user</entry>

              <entry>Must match the PostGIS database user exactly.</entry>
            </row>

            <row>
              <entry>passwd</entry>

              <entry>Must match the PostGIS database user password
              exactly.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

    <para>The namespace element should have a uri attribute, which just needs
    to be unique, it does not have to actually reference anything. Each prefix
    should be unique as well, as it is used internally by geoserver. The
    default value indicates which namespace will be used if a user asks for a
    typeName without specifying its namespace. It should generally be
    sufficient to just define one namespace, as the default, and to use it for
    all DataStores. If two featureTypes need to be in different namespaces but
    share the same DataStore then the easy solution is to just define two
    DataStores with the same connectionParams but different ids and
    namespaces.</para>

    <para>Once <emphasis>catalog.xml</emphasis> is set up then individual
    featureTypes contained in the DataStores need to be configured. Each
    featureType gets its own directory in
    <emphasis>conf/featureTypes</emphasis>. The general convention is to name
    each directory has the same name as the featureType contained in it, but
    it does not matter. If two featureTypes have the same name then the
    namespace prefix should be appended (as two with different names must be
    in different namespaces). So if we have a featureType named rail, it
    should have a directory
    <emphasis>geoserver/conf/featureTypes/rail</emphasis>. In this directory
    there is one required file, <emphasis>info.xml,</emphasis> which contains
    a reference to the DataStore and meta information about the featureType.
    The meta information is only used in the returned Capabilities document,
    <emphasis>name</emphasis> and <emphasis>DataStore</emphasis> are the only
    values that affect the running of GeoServer. It looks like
    this:<programlisting>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;featureType DataStore="local.postgis"&gt;
    &lt;name&gt;rail&lt;/name&gt;
    &lt;title&gt;NYC Rail Centerlines&lt;/title&gt;
    &lt;abstract&gt;This is a simple rail coverage from the New York City basemap.&lt;/abstract&gt;
    &lt;keywords&gt;rail, railroad, World Trade Center, New York City&lt;/keywords&gt;
    &lt;SRS&gt;32118&lt;/SRS&gt;
    &lt;latLonBoundingBox minx="-74.27000" miny="40.50000" maxx="-73.80000" maxy="40.94000" /&gt;
    &lt;styles default="normal"/&gt;
&lt;/featureType&gt;</programlisting></para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <thead>
          <row>
            <entry align="center">Option Name</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>DataStore</entry>

            <entry>Must reference a DataStore that contains the featureType of
            name.</entry>
          </row>

          <row>
            <entry>name</entry>

            <entry>The name of the featureType. Must be in the referenced
            DataStore. For example in PostGIS it must refer to a table in the
            database of local.postgis.</entry>
          </row>

          <row>
            <entry>abstract</entry>

            <entry>A brief description of what the featureType
            represents.</entry>
          </row>

          <row>
            <entry>keywords</entry>

            <entry>Words to search that represent the featureType, reported
            in</entry>
          </row>

          <row>
            <entry>styles</entry>

            <entry>The default style for this feature type.</entry>
          </row>

          <row>
            <entry>SRS</entry>

            <entry>The <ulink url="http://www.epsg.org/">EPSG</ulink> code of
            the spatial reference system of this featureType. Other SRS's are
            not yet supported.</entry>
          </row>

          <row>
            <entry>latLonBoundingBox</entry>

            <entry>The bounding box in LatLon coordinates.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>There is also an optional file called
    <emphasis>schema.xml</emphasis>. In past versions this was required, it is
    a fragment of the GML schema of the featureType, returned by
    DescribeFeatureType. As of 1.1.0 the <emphasis>schema.xml</emphasis> file
    is only needed if a more precise schema is needed. If the file is not
    present then GeoServer will automatically generate the schema for
    DescribeFeatureType responses - this should be sufficient for most
    users</para>
  </sect1>

  <sect1 id="testdata">
    <title>Obtaining Test Data</title>

    <para>The easiest way to get some PostGIS data to work with is to acquire
    shapefiles and use the shp2pgsql utility provided by PostGIS. It should be
    in your pgsql installation directory, under the bin subdirectory. As for
    acquiring shapefiles, the US census provides a lot of their data free of
    cost in the shape format, available <ulink
    url="http://www.esri.com/data/download/census2000_tigerline/index.html">here</ulink>.
    The GeoServer also includes support for using shapefiles directly,
    information about this option is available in the <ulink
    url="advanced.htm">advanced</ulink> section. Using the shapefiles directly
    sacrifices a lot of speed and flexibility, so converting them to PostGIS
    is the recommended way, but the option is available for easier set
    up.</para>
  </sect1>

  <sect1>
    <title>Testing GeoServer</title>

    <para>Testing GeoServer can be done with any standard web browser. The
    easiest way is to use URL encoded Key Value pairs. If GeoServer is running
    on the same machine as the web browser, say on a tomcat instance running
    on port 8080, then the Capabilities document can be tested by just typing
    in the location:
    <emphasis>http://localhost:8080/geoserver/wfs?request=GetCapabilities</emphasis>,
    for example, or
    <emphasis>http://localhost:8080/geoserver/wfs?request=GetFeature&amp;typename=topp:rail</emphasis>.
    The WFS specification has more information on KVP encoding. It is good for
    basic requests, but it falls short with more complex filters and
    transactions. For that we recommend using XML encoding.</para>

    <para>The latest release of GeoServer also includes a great testing
    utility for XML post requests. It is available at
    <emphasis>http://<emphasis
    role="bold">SERVER_ADDRESS:SERVER_PORT</emphasis>/geoserver/wfs/TestWfsPost</emphasis>.
    There are also a number of samples in the Demo section of the web
    administration tool. To use of the TestWfsPost servlet just make sure that
    the request is going to the right location (it defaults to GetFeature),
    and write the XML request just as the WFS specification does it. </para>

    <para>The web administration tool also now includes a 'Demo' section,
    which has a number of sample requests. To use one of the sample request
    use the pull down request box, select one and hit the 'Change' button.
    Unfortunately we haven't yet figured out javascript within jsps and
    struts, or we would have it change automatically. After hitting change
    then his 'Submit', and GeoServer will return the request. You may modify
    the requests to work with your server. And you may even put your own
    requests in the geoserver/data/demo directory. These requests make a great
    reference for how to make WFS and WMS requests. And please let us know if
    you feel any important ones are missing, and we can easily add them for
    the next release.</para>

    <para>For those who do not wish to use the Demo web interface, included is
    a set of links for the default dataset distributed with GeoServer.</para>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="http://localhost:8080/geoserver/wfs/GetCapabilities">http://localhost:8080/geoserver/wfs/GetCapabilities</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://localhost:8080/geoserver/wfs/DescribeFeatureType?typename=topp:bc_roads">http://localhost:8080/geoserver/wfs/DescribeFeatureType?typename=topp:bc_roads</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://localhost:8080/geoserver/wfs/GetFeature?typeName=topp:bc_roads">http://localhost:8080/geoserver/wfs/GetFeature?typeName=topp:bc_roads</ulink></para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="http://localhost:8080/geoserver/wms/GetCapabilities">http://localhost:8080/geoserver/wms/GetCapabilities</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://localhost:8080/geoserver/wms?request=GetMap&amp;amp;layers=topp:bc_roads&amp;amp;bbox=489153,5433000,529000,5460816&amp;amp;width=400&amp;amp;height=200&amp;amp;srs=EPSG:27354&amp;amp;styles=normal&amp;amp;Format=image/png">http://localhost:8080/geoserver/wms?request=GetMap&amp;layers=topp:bc_roads&amp;bbox=489153,5433000,529000,5460816&amp;width=400&amp;height=200&amp;srs=EPSG:27354&amp;styles=normal&amp;Format=image/svg-xml</ulink></para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>Visualizing your Data</title>

    <para>GeoServer includes an integrated Web Map Service (WMS). For more
    information about setting it up see <ulink url="???">WMS</ulink> section.
    But using the web administration interface should be pretty self
    explanatory, just make sure that you have Java Advanced Imaging (JAI)
    installed, it can be downloaded <ulink
    url="http://java.sun.com/products/java-media/jai/downloads/download-1_1_2.html">here</ulink>
    and the Image I/O extension <ulink
    url="http://java.sun.com/products/java-media/jai/downloads/download-iio.html">here</ulink>.
    The trickiest part is figuring out the correct GetMap request to issue to
    the WMS. A sample request is as follows:<programlisting> <ulink
          url="http://localhost:8080/geoserver/wms?request=GetMap&amp;layers=bc_roads&amp;bbox=489153,5433000,529000,5460816&amp;width=400&amp;height=200&amp;srs=EPSG:27354&amp;styles=normal&amp;Format=image/png">http://localhost:8080/geoserver/wms?request=GetMap&amp;layers=topp:bc_roads&amp;bbox=489153,5433000,529000,5460816
&amp;width=400&amp;height=200&amp;srs=EPSG:27354&amp;styles=normal&amp;Format=image/png</ulink></programlisting>To
    adapt it to your data the two parameters to change are 'layers' and
    'bbox'. The layers param should be changed to the FeatureType that you
    successfully added to GeoServer. Do a GetCapabilities
    request:<programlisting> <ulink
          url="http://localhost:8080/geoserver/wms?request=GetCapabilities">http://localhost:8080/geoserver/wms?request=GetCapabilities</ulink></programlisting></para>

    <para>Your featureType should show up as one of the layers there. The name
    there should be the one used to use in the layers param of the GetMap
    request. If the Capabilities document does not contain it then try adding
    it again. If it does the next thing to do is to obtain the bounding box
    for the feature. The easiest way to do this is to issue a GetFeature
    request to the wfs using your featureType, for example:</para>

    <para><programlisting> <ulink
          url=" http://localhost:8080/geoserver/wfs/GetFeature?typeName=topp:bc_roads">http://localhost:8080/geoserver/wfs/GetFeature?typename=topp:my_data</ulink></programlisting></para>

    <para>The response is a FeatureCollection, which will include a boundedBy
    element as follows:<programlisting> &lt;gml:boundedBy&gt;
   &lt;gml:Box srsName="http://www.opengis.net/gml/srs/epsg.xml#27354"&gt;
    &lt;gml:coordinates decimal="." cs="," ts=" "&gt;
        -73.933217,40.78587 -73.768722,40.914404
    &lt;/gml:coordinates&gt;
   &lt;/gml:Box&gt;
&lt;/gml:boundedBy&gt;</programlisting>These values will be the boundingBox of
    all data in the featureType. If you have a very large table then you may
    want to not use the full bounding box, but this should give a good
    guideline of where the features are actually contained. The coordinates
    values can be used almost directly in the bbox param - you just need to
    make sure to change the middle space to a comma. Currently the srs param
    is ignored, GeoServer simply returns data as it is stored. Future versions
    wil do coordinate transformation based on the srs parameter. You can also
    change the other params to adjust the format, height and width of the
    image returned, as well as the style, if you have properly added the SLD
    files. So the final request for my_data will look like
    this:<programlisting> <ulink
          url="http://localhost:8080/geoserver/wms?request=GetMap&amp;layers=bc_roads&amp;bbox=489153,5433000,529000,5460816&amp;width=400&amp;height=200&amp;srs=EPSG:27354&amp;styles=normal&amp;Format=image/png">http://localhost:8080/geoserver/wms?request=GetMap&amp;layers=topp:my_data&amp;bbox=-73.933217,40.78587,-73.768722,40.914404
&amp;width=400&amp;height=200&amp;srs=EPSG:27354&amp;styles=normal&amp;Format=image/png</ulink></programlisting></para>
  </sect1>
</article>