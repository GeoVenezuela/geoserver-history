<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
  <title>Release Guide</title>

  <sect1>
    <title>Introduction</title>

    <para>This is a guide to making a GeoServer release available to the
    general project. The GeoServer project very much believes in the mantra of
    'release early, release often'. Our users should have our latest
    developments as soon as possible, as their feedback and involvement is
    significant part of our success. This release guide is perhaps more
    comprehensive than needed, but we feel it is important to guide developers
    through the whole process. Due to the distributed nature of the project
    you will need a lot of permissions on different systems to put a release
    out. If you are attempting a release you should be in close contact with a
    project admin who can help guide you through the process and give you the
    appropriate permissions.</para>
  </sect1>

  <sect1>
    <title>Testing</title>

    <para>The first step in a release is testing. This step should actually
    probably occur between every step of the release, as past experience has
    shown that testing each step of the way will definitely catch a few
    errors, as the project and the release process are both complex. We
    recommend checking out geoserver from cvs in a completely new directory on
    your machine. It should be checked out with the -P option to prune out of
    date directories, as the GeoServer source tree has undergone quite a bit
    of refactoring, and we do not want our end users to wade through a bunch
    of similarly named directories.</para>

    <para>There are a number of different tests that should be
    performed.</para>

    <itemizedlist>
      <listitem>
        <para>Unit Tests - These are the easiest to run, just type:
        <programlisting>ant unit-all</programlisting><action>This will run all
        unit tests. Be sure to watch them to make sure they all pass. If they
        do not then they should be debugged, as it looks quite bad if users
        run the unit tests on a release and get a bunch of errors. If the unit
        tests do not even run due to an error such as 'Could not create task
        of type junit' then that means that junit needs to be installed. We do
        not include it in our source tree by default since we figure that most
        developers probably have it installed already. To add it to the ant
        installation simply download junit.jar and place it in $ANT_HOME/lib.
        (Document this elsewhere? Not really appropriate to this doc, but it's
        not contained anywhere else afaik. Also maybe say where to get
        junit.jar?). For eclipse users, ant does not come pre-installed with junit -
        you must add the junit jar to ant.  Go to 
        Window ? Preferences ? Ant ? Runtime. Then click the "Add JARs" button and 
        select junit.jar from the geoserver/lib directory.   </action></para>
      </listitem>

      <listitem>
        <para>Hand Testing - This simply means try out GeoServer and observe
        the results on a few tests. The easiest way to do this is to use
        UserBasic as the test.type parameter. If the embedded tomcat test
        server were working then it could be used to start GeoServer up right
        away, but instead you must use the test-ext target, setting your
        dir.container to your webapps directory. Then you should just issue a
        few wms and wfs requests, from either your browser or the TestWfsPost
        servlet. The bc_roads feature serves as a good test, just run some wfs
        and wms queries on it and see if it displays correctly. (Type out the
        sample requests and the expected responses here...this whole testing
        section should perhaps move...)</para>
      </listitem>

      <listitem>
        <para>Cite Tests - These are the most comprehensive tests available to
        test GeoServer. Getting them set up is a topic on its own, but we have
        done most of the work, creating a postgis script to create the
        appropraite tables and configuration utilities. Shapefiles for the
        tests are also available (are these passing everything?). Just change
        the test.type from UserBasic to the postgis or shape cite types.
        You'll have to modify the postgis one to point to your installation
        (unless we can stand up a public db) through the GeoServer admin tool.
        If you really don't want to use the admin tool then you can unzip the
        cite test zip and edit the file created (David, you have details for
        this test target?). The cite tests will take at least a half hour to
        run all the way, so we recommend working on some documentation or the
        readme file while they run. The tests are available at
        http://cite.occamlab.com/tsOGC. To run them you will need a public
        instance of GeoServer outside of a firewall.</para>
      </listitem>
    </itemizedlist>

    <para>The unit tests and hand tests should be run at most every step of
    the way, as often as possible, just to make sure any little changes did
    not cause things to go wrong. On the day of a release the cite tests
    should also be run several times. For a point release all cite tests must
    pass. For alpha and beta releases they do not all need to pass, but a good
    majority is recommended, since they represent the core functionality of
    GeoServer and users expect those operations to work. GeoServer should also
    be tested on several servlet containers and operating systems. We have
    been mainly supporting Tomcat and Resin, on both Windows and Linux.
    Testing different versions of Linux and Windows is probably a bit tough,
    but at each one version of each should be tested. We recommend testing
    Tomcat 4 and 5 and Resin 2 and 3, since there are many users of both. If
    one works the other should as well, it is just a good idea to make sure.
    Yes, we know that all these tests may seem a bit ridiculous, but
    maintaining a high quality of releases is very important to the success of
    GeoServer, and generally the tests will reveal a few errors that were not
    present before. And even if none are found it allows you to feel much more
    confident in the quality of the release.</para>
  </sect1>

  <sect1>
    <title>Readme file</title>

    <para>While the cite tests are running we recommend taking the time to
    write a solid readme. It is located in the documents directory, and will
    be copied to the top level directory when building the release. A readme
    should be present, so just follow the format. It should generally be a few
    introductory paragraphs, highlighting the main points of the release. A
    few shout-outs and thank yous can follow, giving credit where it is due
    (which is always good to do in an open source project, as we have few ways
    to reward contributors other than giving credit and props). The paragraph
    on the GeoServer user map should be included, so that users will add
    themselves to it - this is important for continued support of GeoServer,
    so that potential funders can see that it is in fact being widely used.
    Next generally comes a list of the bug fixes and new features in this
    release, followed by known bugs and information as to where to submit bugs
    and feature requests.</para>
  </sect1>

  <sect1>
    <title>Creating the Release</title>

    <para>After the readme is done and GeoServer is extensively tested it is
    time to build the release. If there were any bugs found and fixed in the
    testing then the source should be completely rechecked out, to insure that
    all the changes actually made it into cvs. Then just run <programlisting>ant release-all</programlisting><action>Make
    sure that the name.release is set to what you would like to call the
    release. The script will automatically prepend geoserver on - so a
    name.release of 1.2.0 will generate geoserver-1.2.0.war,
    geoserver-1.2.0-src.tar.gz, geoserver-1.2.0-docs.tar.gz, etc. Once the
    release is created it is very important to test it completely again. Even
    going so far as to running cite tests, and doing hand and unit tests while
    cite is running, and checking up on the documentation and readmes. This
    ensures that the release actually built is exactly as it should
    be.</action></para>
  </sect1>

  <sect1>
    <title>Uploading to SourceForge</title>

    <para>The next step is to upload to sourceforge. They have great docs on
    how to perform the release. You will need release tech permissions to
    perform the release. For more information go to:
    http://sf.net/project/admin/editpackages.php?group_id=25086 Since they
    cover it so well we will just do the quick version:</para>

    <itemizedlist>
      <listitem>
        <para>ftp to upload.sf.net - put all the files in release
        there.</para>
      </listitem>

      <listitem>
        <para>Go to the webpage above, and click 'add release' next to
        geoserver. Call it geoserver-version.number - like
        geoserver-1.2.0</para>
      </listitem>

      <listitem>
        <para>Upload the release notes - just use the readme as release notes.
        Be sure to click to preserver the formating.</para>
      </listitem>

      <listitem>
        <para>Find the file in the list of files on upload.sf.net and add them
        to the release</para>
      </listitem>

      <listitem>
        <para>Set the processor to any, and the type to source.gz.</para>
      </listitem>

      <listitem>
        <para>Notify the users watching the release.</para>
      </listitem>

      <listitem>
        <para>Download your newly released file and test it again to make sure
        that everything is perfect.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>Tagging the Release</title>

    <para>After the release the source code must be tagged so that others can
    check it out from cvs. This is best done immediately after uploading to
    sourceforge, so that the cvs exactly reflects the state of the code that
    was released. Our convention is to call a release rel followed by the
    version number, delimited by underscores, as decimals are not allowed in
    cvs. To tag a release simply type:<programlisting>svn tag rel_1_2_0</programlisting></para>
  </sect1>

  <sect1>
    <title>Updating the Website</title>

    <para>Various places on the web need to be updated to reflect the fact
    that we released. The first of these is the documentation, both the
    javadocs and the user docs. All the documents needed will be in the
    release directory (they are generated for the release). The zipped up docs
    should be uploaded to shell.sourceforge.net - scp is the best way to
    accomplish this. Once there they can be unzipped and then transfered to
    the appropriate directories under
    /home/groups/g/ge/geoserver/htdocs/documentation/. Note that the api
    directory is renamed javadocs in the web space. Each new documentation
    should have its own version number, and then the root documentation
    directory should have symbolic links to the latest docs The other website
    that needs updating is JIRA. Check the roadmap for the release. It should
    already have all bugs for the release closed, but if they are not then
    close the ones that were done at the last moment or that should be closed,
    and move the rest to a future release. Click on the administration tab
    (will only appear if you have admin privelages on jira), and then click on
    release under versions. Then release the version that you just put
    out.</para>
  </sect1>

  <sect1>
    <title>Announcing the Release</title>

    <para>The final step is announcing to the world that you just put out a
    release. The first place is the geoserver homepage. You'll probably need
    admin status to add things to the web page. To get admin status you will
    need to sign up for an account on the web page, and then a current admin
    can up your privelages. The announcement should be a few paragraphs long,
    the first paragraph should give the basic information and direct links to
    the download. The following paragraphs should give more information and
    often a good little story. These sometimes get picked up by others, either
    from the homepage or the email list. So check them for typos and make them
    readable so someone else can grab a quick quote on the release. Then email
    the geoserver devel list, as many people are pretty much only on the list
    for release announcements. Next we generally update the freshmeat entry,
    as it gets quite a few hits as the release will appear on the front page.
    The story can also be added as a story on sourceforge, as sometimes those
    will get picked up and placed on the main sourceforge page. Variations or
    cut and paste from the homepage story work just fine. Any other places to
    announce it are fair game. Generally at least the freegis entry should be
    updated online, if a major release then the freegis list can be emailed
    directly. For 1.1.0 the story appeared on osdir.com and dev.java.net, but
    we did not do any direct announcing there, so I am not sure what the
    policy is on submitting stuff to them.</para>
  </sect1>
  <sect1>
    <title>Making .exe installer</title>
    NOTE: as some point we should move to a java-based (platform independed)
          installer as this is only good for windows.
 <itemizedlist>
 
 <listitem> 1. modify documents/geoserver.nsi so that the info in it correct (ie. version numbers) </listitem>
 <listitem>    + quickly read through the document and make any documentation changes </listitem>
 <listitem> 2. build a release (ant release-all) as above </listitem>
 <listitem> 3. make a new temporary directory </listitem>
 <listitem> 4. uncompress the release/geoserver-1.3.0-beta2-bin.zip  (or whatever you released) to your temp directory </listitem>
 <listitem> 5. move documents/geoserver.nsi from eclipse (svn archive) to the new temporary directory  </listitem>
 <listitem> 6. download and install the nullsoft installer if you havent already </listitem>
 <listitem> 7. run the installer and load the geoserver.nsi file </listitem>
 </itemizedlist>
In your temporary directory, you should see a "geoserver-1.3.0-beta2.exe"!

You should install and test this!
          
     
  </sect1>
  <sect1>
  <title>Release on JIRA</title>
     Go to 'administer project' then 'manage versions' then click the appropriate "release" button.
  </sect1>
</article>