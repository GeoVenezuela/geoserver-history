package org.vfny.geoserver.responses.wms.featureInfo;

import java.awt.geom.AffineTransform;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.geotools.data.FeatureResults;
import org.geotools.data.Query;
import org.geotools.filter.AbstractFilter;
import org.geotools.filter.FilterFactory;
import org.geotools.filter.GeometryFilter;
import org.geotools.filter.IllegalFilterException;
import org.vfny.geoserver.ServiceException;
import org.vfny.geoserver.WmsException;
import org.vfny.geoserver.global.FeatureTypeInfo;
import org.vfny.geoserver.global.GeoServer;
import org.vfny.geoserver.requests.wms.GetFeatureInfoRequest;
import org.vfny.geoserver.requests.wms.GetMapRequest;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Envelope;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LinearRing;
import com.vividsolutions.jts.geom.Polygon;


public abstract class AbstractFeatureInfoResponse extends GetFeatureInfoDelegate {
	 
    /** A logger for this class. */
    protected static final Logger LOGGER = Logger.getLogger(
            "org.vfny.geoserver.responses.wms.featureinfo");

    /** The formats supported by this map delegate. */
    protected List supportedFormats = null;

    protected List results;
    protected List metas;
    
    /**
     * setted in execute() from the requested output format, it's holded just
     * to be sure that method has been called before getContentType() thus
     * supporting the workflow contract of the request processing
     */
    protected String format = null;

	/**
     * Creates a new GetMapDelegate object.
     */
    /** Autogenerated proxy constructor. */
    public AbstractFeatureInfoResponse() {
        super();
    }

    
    /**
     * Returns the content encoding for the output data.
     * <p>
     * Note that this reffers to an encoding applied to the response stream (such
     * as GZIP or DEFLATE), and not to the MIME response type, wich is returned
     * by <code>getContentType()</code>
     * </p>
     * @return <code>null</code> since no special encoding is performed while
     *         wrtting to the output stream.
     */
    public String getContentEncoding() {
        return null;
    }
    

    /**
     * Writes the image to the client.
     *
     * @param out The output stream to write to.
     *
     * @throws org.vfny.geoserver.ServiceException DOCUMENT ME!
     * @throws java.io.IOException DOCUMENT ME!
     */
    public abstract void writeTo(OutputStream out) throws ServiceException, IOException;
    
    /**
     * The formats this delegate supports.
     *
     * @return The list of the supported formats
     */
    public List getSupportedFormats(){
    	return supportedFormats;
    }

    /**
     *
     * @param gs app context
     * @task TODO: implement
     */
    public void abort(GeoServer gs) {
    }

    /**
     * Gets the content type.  This is set by the request, should only be
     * called after execute.  GetMapResponse should handle this though.
     *
     * @param gs server configuration
     *
     * @return The mime type that this response will generate.
     *
     * @throws java.lang.IllegalStateException if <code>execute()</code> has
     *         not been previously called
     */
    public String getContentType(GeoServer gs){
    	if(format == null){
    		throw new IllegalStateException("Content type unknown since execute() has not been called yet");
    	}
    	System.err.println("returning content type " + format);
        return format;
    }

    /**
     * Performs the execute request using geotools rendering.
     *
     * @param requestedLayers The information on the types requested.
     * @param queries The results of the queries to generate maps with.
     *
     * @throws WmsException For any problems.
     */
    protected void execute(FeatureTypeInfo[] requestedLayers, Query[] queries,
        int x, int y) throws WmsException {
    	
        GetFeatureInfoRequest request = getRequest();
        this.format = request.getInfoFormat();
        
        GetMapRequest getMapReq = request.getGetMapRequest();
        
        int width = getMapReq.getWidth();
        int height = getMapReq.getHeight();
        Envelope bbox = getMapReq.getBbox();
        
        Coordinate upperLeft = pixelToWorld(x, y, bbox, width, height);
        Coordinate lowerRight = pixelToWorld(x + 1, y + 1, bbox, width, height);

		Coordinate []coords = new Coordinate[5];
        coords[0] = upperLeft;
        coords[1] = new Coordinate(lowerRight.x, upperLeft.y);
        coords[2] = lowerRight;
        coords[3] = new Coordinate(upperLeft.x, lowerRight.y);
        coords[4] = coords[0];
			   
        GeometryFactory geomFac = new GeometryFactory();

        LinearRing boundary = geomFac.createLinearRing(coords);
        
        Polygon pixelRect = geomFac.createPolygon(boundary, null);


        FilterFactory filterFac = FilterFactory.createFilterFactory();
        
        GeometryFilter getFInfoFilter = null;
		try {
			getFInfoFilter = filterFac.createGeometryFilter(AbstractFilter.GEOMETRY_INTERSECTS);
	        getFInfoFilter.addLeftGeometry(filterFac.createLiteralExpression(pixelRect));
		} catch (IllegalFilterException e) {
			e.printStackTrace();
            throw new WmsException(null, "Internal error : " + e.getMessage());
		}
        
        int layerCount = requestedLayers.length;
        results = new ArrayList(layerCount);
        metas = new ArrayList(layerCount);

        try {
			for(int i=0; i < layerCount; i++){
				FeatureTypeInfo finfo = requestedLayers[i];
			    FeatureResults match = finfo.getFeatureSource().getFeatures(getFInfoFilter);
			    if(match.getCount() > 0){
			        results.add(match);
			        metas.add(finfo);
			    }
			}
		} catch (IOException ioe) {
            ioe.printStackTrace();
            throw new WmsException(null, "Internal error : " + ioe.getMessage());
		}
    }

    /**
     * Converts a coordinate expressed on the device space back to real world
     * coordinates. 
     * Stolen from LiteRenderer but without the need of a Graphics object
     *
     * @param x horizontal coordinate on device space
     * @param y vertical coordinate on device space
     * @param map The map extent
     *
     * @return The correspondent real world coordinate
     */
    private Coordinate pixelToWorld(int x, int y, Envelope map, int width, int height) {
        //set up the affine transform and calculate scale values
        AffineTransform at = worldToScreenTransform(map, width, height);

            Point2D result = null;
			try {
				result = at.inverseTransform(new java.awt.geom.Point2D.Double(
				            x, y), new java.awt.geom.Point2D.Double());
			} catch (NoninvertibleTransformException e) {
				throw new RuntimeException(e);
			}
			
			Coordinate c = new Coordinate(result.getX(), result.getY());
            return c;
    }
    
    /**
     * Sets up the affine transform.  Stolen from liteRenderer code.
     *
     * @param mapExtent the map extent
     * @param screenSize the screen size
     *
     * @return a transform that maps from real world coordinates to the screen
     */
    private AffineTransform worldToScreenTransform(Envelope mapExtent,
        int width, int height) {
        double scaleX = (double)width / mapExtent.getWidth();
        double scaleY = (double)height / mapExtent.getHeight();

        double tx = -mapExtent.getMinX() * scaleX;
        double ty = (mapExtent.getMinY() * scaleY) + height;

        AffineTransform at = new AffineTransform(scaleX, 0.0d, 0.0d, -scaleY,
                tx, ty);

        return at;
    }

}
