<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
  <title>Advanced Configuration</title>

  <sect1 id="additional">
    <title>Additional Options</title>

    <para>Several advanced configuration options have been added to
    GeoServer:</para>

    <itemizedlist>
      <listitem>
        <para>LoggingLevel allows easier configuration of GeoServer's logging.
        Possible values include FINEST, FINER, CONFIG, INFO, WARNING, and
        SEVERE (in order from most messages to least). FINEST should not be
        used except for tracking difficult bugs, as it generates a lot of
        messages and will quickly fill up your log. Logging still needs a bit
        of work, to have the correct meaningful messages for each level, but
        the current logging provides a good start. If the LoggingLevel is not
        set then GeoServer will just use the values in your jre's
        logging.properties file. To set the logging just add a line like the
        following to the global section of the
        <emphasis>services.xml</emphasis> file: <programlisting>&lt;LoggingLevel&gt;FINER&lt;/LoggingLevel&gt;</programlisting></para>
      </listitem>

      <listitem>
        <para>Verbose, if set to true, outputs the xml with newlines and
        indents. If set to false, or not present in the global section of the
        <emphasis>services.xml</emphasis> file, then no newlines or indents
        will be contained in the output.<programlisting>&lt;Verbose value="true"&gt;</programlisting></para>
      </listitem>

      <listitem>
        <para>The SchemaBaseUrl element can be used to set a different
        location from which GeoServer references the official OGC schemas
        (WFS, filter and GML). GeoServer by default references them locally in
        GeoServer/data/capabilities, but some servlet containers don't allow
        access to this, or they may be heavily trafficked, so a real apache
        web server would be better. Either way, the url must have its
        directory structure like <ulink
        url="http://schemas.opengis.net/">schemas.opengis.net</ulink>. This
        goes in the global section of <emphasis>services.xml</emphasis>
        .<programlisting>&lt;SchemaBaseUrl&gt;http://www.openplans.org&lt;/SchemaBaseUrl&gt;</programlisting></para>
      </listitem>

      <listitem>
        <para>The NumDecimals element can be used to set how many places past
        the decimal are returned in a getFeature response. To set to two
        decimal places add the fschema.xmlollowing to services.xml in the
        global section:<programlisting>&lt;NumDecimals&gt;2&lt;/NumDecimals&gt;</programlisting></para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="namespaces">
    <title>FeatureType Control</title>

    <para>GeoServer 1.2.0 introduces greater control over attributes contained
    in a featureType. In an <emphasis>schema.xml</emphasis> file you may now
    specify an attributes element as follows:<programlisting>&lt;xs:element name="id" type="xs:string"/&gt;
&lt;xs:element ref="gml:lineStringProperty" minOccurs="0"/&gt;</programlisting></para>

    <para>This indicates that only the attributes id and lineStringProperty
    may be returned. This also spercifies that the id MUST be returned. If the
    back end table has columns of id, length, lineStringProperty, and name
    then this set up would make it so length and name are never seen by the
    clients. The types which are valid are any types defined using either the
    GML specifications, the primitive XML Schema elements or any user defined
    XML Schema complexTypes. All of the restrictions specified in these the
    <emphasis>schema.xml</emphasis> files restrictes the associated
    featuretype. For more information please refer to the XML Schema and GML
    specifications.</para>
  </sect1>

  <sect1 id="shapefile">
    <title>ShapeFile Support</title>

    <para>As of 0.96 GeoServer supports the Shapefile format. Postgis remains
    the recommended GeoServer datastore, due to its speed and transactional
    capabilities. But for those users wishing to avoid the lengthy Postgis
    install, who just want to get GeoServer up and running, Shapefiles provide
    a good alternative. Large Shapefiles have not been tested too extensively,
    so we'd appreciate reports on how it goes. And much thanks goes out to the
    <ulink url="http://geotools.org">Geotools</ulink> team, as we are just
    plugging in their hard work. Ian Schneider deserves special mention for
    his work to get the geotools Shapefile module ready to go into
    GeoServer.</para>

    <para>To use Shapefiles instead of PostGIS, modify the datastore element
    of <emphasis>catalog.xml</emphasis> with different connectionParams. Check
    the user install page <ulink url="install.htm#data">here</ulink>, for more
    information on that set up. To use Shapefiles include the url to the
    location of the .shp file as follows:<programlisting>&lt;connectionParams&gt;
  &lt;parameter name="url" value="file:/home/chris/road.shp"&gt;
&lt;/connectionParams&gt;</programlisting></para>

    <para>The Shapefile can also be referenced locally - if put in the
    conf/featureTypes directory than it will be copied over to the war file.
    It is best to put them in the same directory as the corresponding
    <emphasis>info.xml</emphasis> file, for example
    <emphasis>conf/featureTypes/bc_roads/bc_roads.shp</emphasis>, and then
    reference with the <emphasis>/bc_roads</emphasis> path. If the file was
    stored there then the params should look like this (next version should
    handle this more cleanly):<programlisting>&lt;connectionParams&gt;
  &lt;parameter name="filename" value="bc_roads/bc_roads.shp"&gt;
&lt;/connectionParams&gt;</programlisting></para>

    <para>One more thing to note, the name element of the
    <emphasis>info.xml</emphasis> file that references a shape datastore
    <emphasis role="bold">must</emphasis> have the same 'name' element as the
    file name. So for the bc_roads shape it should be
    &lt;name&gt;bc_roads&lt;/name&gt;. Any other name will fail. Future
    versions should handle this better</para>
  </sect1>

  <sect1 id="oracle">
    <title>Oracle Support</title>

    <para>GeoServer also offers Oracle Spatial support, contributed and
    maintained by Sean Geoghegan. It includes support of all OGC filters,
    connection pooling, and transactional capabilities. To use the Oracle
    Datastore the <emphasis>catalog.xml</emphasis> file must have the
    following values for the connectionParams:</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <thead>
          <row>
            <entry align="center">Param Name</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>host</entry>

            <entry>The machine which the Oracle instance is running
            on.</entry>
          </row>

          <row>
            <entry>port</entry>

            <entry>The port the Oracle instance is running on. The default is
            1521</entry>
          </row>

          <row>
            <entry>user</entry>

            <entry>The user to connect with.</entry>
          </row>

          <row>
            <entry>passwd</entry>

            <entry>The password to connect with.</entry>
          </row>

          <row>
            <entry>dbtype</entry>

            <entry>Must be 'oracle' to use the oracle datastore.</entry>
          </row>

          <row>
            <entry>schema</entry>

            <entry>An optional field to specify which schema the tables should
            be found in.</entry>
          </row>

          <row>
            <entry>instance</entry>

            <entry>The Oracle instance name, should be the same as the SERVICE
            ID.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>Also note that the name element in the <emphasis>info.xml</emphasis>
    file to specify the featureType must be all capitalized, for some reason
    the JDBC driver does not recognize the table otherwise. If specifying
    attributes in the info.xml file they must also be all capitalized. It does
    not matter what case is used inside of oracle, this is only an issue with
    the driver that connects GeoServer to the database. Additionally, two jars
    are required in the GeoServer/lib directory. As Oracle is not open source
    we can not distribute these, but you should be able to find them, either
    somewhere within your oracle install, or on the <ulink
    url="http://otn.oracle.com/">Oracle Technology Network</ulink>. The two
    jars you need are classes12.jar, which contains the jdbc classes, and
    sdoapi.jar, which contains the spatial api jars. If you recieve an
    uncaught exception - NoClassDefFoundError, then you probably have the jar
    in the wrong place or the wrong jars. Users have had the best luck with
    the jars distributed with their oracle installations, others seem to be
    more prone to errors. The <emphasis>catalog.xml</emphasis> file for an
    Oracle datastore should look as follows:</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;catalog&gt;
schema  &lt;!-- defines the datastores, more than one is possible --&gt;
  &lt;datastores&gt;
    &lt;datastore id="remote.oracle" enabled="true" namespace="topp"&gt;
      &lt;connectionParams&gt;
        &lt;parameter name="host" value="oracle"/&gt;
        &lt;parameter name="port" value="1521"/&gt;
        &lt;parameter name="instance" value="test"/&gt;
        &lt;parameter name="user" value="testuser"/&gt;
        &lt;parameter name="passwd" value="pass"/&gt;
        &lt;parameter name="dbtype" value="oracle"/&gt;
      &lt;/connectionParams&gt;
    &lt;/datastore&gt;
  ...
  &lt;/datastores&gt;
  ... 
&lt;/catalog&gt;</programlisting>
  </sect1>

  <sect1 id="arcsde">
    <title>ArcSDE Support</title>

    <para>GeoServer 1.1.0 adds ArcSDE as a datastore, contributed by Gabriel
    Roldán. He has tested it extensively, but it could use more tests on other
    machines. If you have an ArcSDE installation it would be great if you
    could provide feedback on the datastore. To use the ArcSDE Datastore the
    <emphasis>catalog.xml</emphasis> file must have the following values for
    the connectionParams:rail
    http://openplans.org:8080/GeoServer/wfs?request=GetFeature&amp;typename=topp:rail</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <thead>
          <row>
            <entry align="center">Param Name</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>host</entry>

            <entry>The machine which the ArcSDE instance is running
            on.</entry>
          </row>

          <row>
            <entry>port</entry>

            <entry>The port the ArcSDE instance is running on. The default is
            1521</entry>
          </row>

          <row>
            <entry>user</entry>

            <entry>The user to connect with.</entry>
          </row>

          <row>
            <entry>passwd</entry>

            <entry>The password to connect with.</entry>
          </row>

          <row>
            <entry>dbtype</entry>

            <entry>Must be 'arcsde' to use the ArcSDE datastore.</entry>
          </row>

          <row>
            <entry>instance</entry>

            <entry>The ArcSDE instance name.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>GeoServer includes the jsde_sdk.8.3.jar with installation, and no
    additional jars should be needed. The <emphasis>catalog.xml</emphasis>
    file for an ArcSDE datastore should look as follows:</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;catalog&gt;
  &lt;!-- defines the datastores, more than one is possible --&gt;
  &lt;datastores&gt;
    &lt;datastore id="remote.oracle" enabled="true" namespace="topp"&gt;
      &lt;connectionParams&gt;
        &lt;parameter name="server" value="localhost"/&gt;
        &lt;parameter name="port" value="5151"/&gt;
        &lt;parameter name="instance" value="sde"/&gt;
        &lt;parameter name="user" value="testsde"/&gt;
        &lt;parameter name="password" value="pass"/&gt;
        &lt;parameter name="dbtype" value="arcsde"/&gt;
      &lt;/connectionParams&gt;
    &lt;/datastore&gt;
  ...
  &lt;/datastores&gt;
  ... rail
http://openplans.org:8080/GeoServer/wfs?request=GetFeature&amp;typename=topp:rail

&lt;/catalog&gt;</programlisting>
  </sect1>

  <sect1 id="international">
    <title>Internationalization</title>

    <para>The 0.97 release includes better support for international character
    set encoding. If you have problems with this don't hesitate to ask for
    support; We've tried to resolve the issues, but we also don't have the
    capacity to carry out extensive tests for different languages, so we rely
    on our users to let us know when things go wrong. Hopefully the fixes thus
    far should be sufficient for most users. To use the new
    internationalization fixes, the easiest way is to add a &lt;CharSet&gt;
    element to the configuration.xml file that contains the encoding you wish
    to use:</para>

    <programlisting>&lt;CharSet&gt;iso-8859-1&lt;/CharSet&gt;</programlisting>

    <para>This will set the mime encoding and the xml header encoding to that
    charset. The 1.1.0 does not yet support individual datastores inheiriting
    the global charset, so it must be set as a connectionParam for each
    datastore. If no CharSet element is found then the default is UTF-8 for
    the return xml, and no charset property for postgis.</para>
  </sect1>

  <sect1 id="dispatcher">
    <title>Dispatcher Servlet</title>

    <para>Due to the functioning of some WFS clients, the 0.98 release
    introduces the Dispatcher servlets, which can be used to make GeoServer
    respond just like a cgi script to get requests. This is actually not
    officially part of the WFS specification, but all the spec examples use
    the same base URL, complete cgi style, so it is understandable why some
    wfs clients would use this shortcut. To make use of the Dispatcher servlet
    you can use either <emphasis>http://<emphasis
    role="bold">SERVER_ADDRESS</emphasis>:<emphasis
    role="bold">SERVER_PORT</emphasis> /GeoServer/Dispatcher?</emphasis> or
    <emphasis>http://<emphasis role="bold">SERVER_ADDRESS</emphasis>:<emphasis
    role="bold">SERVER_PORT</emphasis>/GeoServer/wfs?</emphasis>, to look even
    more like a cgi script. If you'd like to change the base name from wfs you
    only need edit the <emphasis>web.xml</emphasis> file in
    <emphasis>GeoServer/misc/documents</emphasis>. Using the dispatcher is as
    simple as the following series of requests:<programlisting>http://openplans.org:8080/GeoServer/wfs?request=GetCapabilities
http://openplans.org:8080/GeoServer/wfs?request=DescribeFeatureType&amp;typename=topp:rail
http://openplans.org:8080/GeoServer/wfs?request=GetFeature&amp;typename=topp:rail</programlisting></para>
  </sect1>
</article>