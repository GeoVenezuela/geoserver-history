<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article>
  <title>GeoServer Configuration</title>

  <para>When adding your lastest, greatest ideas into the GeoServer framework
  there is one stop over point that most developement shares: the User.</para>

  <para>There are two places in which the User may interact with GeoServer:</para>

  <itemizedlist>
    <listitem>
      <para>configuration files</para>
    </listitem>

    <listitem>
      <para>user interface</para>
    </listitem>
  </itemizedlist>

  <para>This document provides a detailed walkthrough on how to add your own
  information to the GeoServer configuration system.</para>

  <para>A quick checklist for those that never read the whole document:</para>

  <orderedlist>
    <listitem>
      <para>Configuration files can be added to without problem</para>
    </listitem>

    <listitem>
      <para>The new configuration information must be optional</para>
    </listitem>

    <listitem>
      <para>Write up a propsal to the email list for review/comment:</para>

      <programlisting>Be sure to include:
name: name of configuration information
description: what the information is needed for
xml fragment: example extention to an existing configuration file</programlisting>
    </listitem>

    <listitem>
      <para>Wait for a sanity check from a project lead, or at least a biz
      day.</para>
    </listitem>

    <listitem>
      <para>Extend a configuraiton file</para>
    </listitem>

    <listitem>
      <para>Extend appropriate DTO class, along with XMLReader and XMLWriter</para>
    </listitem>

    <listitem>
      <para>Update appropriate class in global</para>
    </listitem>

    <listitem>
      <para>Update appropriate class in config, along with form and jsp</para>
    </listitem>
  </orderedlist>

  <para>Note duplication of information is never cool: if you have one watch
  you know what time it is, if you have two watches you are never quite sure.
  This is most often a problem with schema.xml. XMLSchema is so powerful, and
  so difficult to parse, that we often wish for an easier way.</para>

  <para>The GeoServer configuration system, is not so much a starting point
  for your GeoServer development as an ending point. Welcome to the final leg
  of your GeoServer developement, we thank you for your support.</para>

  <section>
    <title>Configuration Files</title>

    <para>GeoServer makes use of a series of xml files to store configuration
    information:</para>

    <itemizedlist>
      <listitem>
        <para>services.xml:used to define the common GeoServer configuration
        options in addition to WFS and WMS services</para>
      </listitem>

      <listitem>
        <para>catalog.xml: used to configure the data subsystem</para>
      </listitem>

      <listitem>
        <para>info.xml (&#38; associated schema.xml): used to define which
        FeatureTypes are available through the data subsystem</para>
      </listitem>
    </itemizedlist>

    <para>One of your first chalanges will be to decide which xml file you
    option belongs in. Lets start by considering our example.</para>

    <para>Example Configuration issue from Jira:</para>

    <programlisting><emphasis role="bold">Jira Task:</emphasis> GEOS-58: Ability to turn off Transactions
<emphasis role="bold">Description:</emphasis>
Users have requested the ability to turn &#39;off&#39; transaction capabilities, so that users of their
WFS&#39;s can not modify their databases. I&#39;m not sure if this is in 1.2 yet or not, but we should
get the fix in there, and in a 1.1.1 bug fix release. It should be pretty easy to implement, just
have a configuration setting to turn it off, and transactions check with that global value before
letting a transaction go through. </programlisting>

    <para>This task is to do with the Web Feature Server Functionality of
    GeoServer. So we will want to work with the services.xml file and add an
    additional option to the wfs section.</para>

    <section>
      <title>Figure out how to Extend a Configuration File</title>

      <para>Extentions should allways be addative, and optional. We do not
      wish to break existing installations of GeoServer.</para>

      <para>For our example we will add a &#34;serviceLevel&#34; tag to the
      wfs section of services.xml. The OGC allows considerable varience in the
      capabilities of a Web Feature Server while still remaining complient
      with their specification.</para>

      <table>
        <title>Web Feature Server Complient Levels of Service</title>

        <tgroup cols="3">
          <tbody>
            <row>
              <entry>OGC Complient</entry>

              <entry>Opperations</entry>

              <entry>Allowable value</entry>
            </row>

            <row>
              <entry>Basic Web Feature Server</entry>

              <entry>GetCapabilities DescribeFeatureType GetFeature</entry>

              <entry><para>basic</para></entry>
            </row>

            <row>
              <entry>Transaction Web Feature Server</entry>

              <entry>Transaction</entry>

              <entry>transactional</entry>
            </row>

            <row>
              <entry>Transaction WFS with Optional Locking</entry>

              <entry>LockFeature GetFeatureWithLock</entry>

              <entry>complete</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Extension to services.xml for WFS Level of Service:</para>

      <programlisting>&#60;wfs&#62;
 ...
 &#60;serviceLevel&#62;Basic&#60;/serviceLevel
 ...
&#60;/wfs&#62;</programlisting>

      <para>There is almost a conflict here with the FeatureType configuration
      files, not all FeatureTypes are editable and as such will not allow the
      Transaction opperation. As noted in the GEOS-58 task an acceptable
      workaround is to restrict write access for the GeoServer at the
      DataStore level (this can be acomplished by changing file, or database
      permissions).</para>
    </section>

    <section>
      <title>Submit Idea to the Email Lists</title>

      <para>Next up we can submit our idea to the email list, the following
      email can serve as an example. Although it includes additional
      recomendations for the DTO and User Interface.</para>

      <para>Sample email:</para>

      <programlisting><emphasis>subject:</emphasis> Configuration proposal for Transactions control
<emphasis>content:</emphasis>
Request for a new configuration information:
1) name: serviceLevel
2) requirement: needed to control level of WFS service (see GEOS-58This
3) configuration file: service.xml
4) sample xml fragements:
&#60;wfs&#62;
 ...
 &#60;serviceLevel&#62;Basic&#60;/serviceLevel
 ...
&#60;/wfs&#62;

Where serviceLevel can be one of:

Basic
-----
Operations: GetCapabilities
           DescribeFeatureType
           GetFeature
OGC: Basic Web Feature Server

Transactional
-------------
Opperations: Transaction
OGC: Transactional Web Feature Server

Complete
--------
Opperations: LockFeature

5) DTO modifications: serviceType enum of Basic/Transaction/Complete
6) UI modifications: select drop down on the WFSCondig screen

For additional information See:
http://jira.codehaus.org/secure/ViewIssue.jspa?key=GEOS-93
http://jira.codehaus.org/secure/ViewIssue.jspa?key=GEOS-58 </programlisting>

      <para>And then we get to wait for Chris Holmes, or some other friendly
      GeoServer maintainer for approval. As long as you are simply extending a
      configuration file with optional content, we may as well go onto the
      next section while we wait.</para>

      <para>We just won&#39;t commit quite yet.</para>
    </section>
  </section>

  <section>
    <title>GeoServer Configuration</title>

    <para>Extending GeoServer&#39;s configuration IO has four steps:</para>

    <orderedlist>
      <listitem>
        <para>Create a Bean or Attribute to store your new information</para>
      </listitem>

      <listitem>
        <para>Load your information from XML</para>
      </listitem>

      <listitem>
        <para>Use you information to set up GeoServer</para>
      </listitem>

      <listitem>
        <para>Wrtie your information to XML</para>
      </listitem>
    </orderedlist>

    <para>Although in practice many of these processes are completed
    concurently and closely depend upon each other, we are going to pretend we
    live in a perfect linear world.</para>

    <section>
      <title>Data Transfer Objects</title>

      <para>The DTO objects closely resemble the structure of the XML files.
      The DTO objects should contain data in a logical grouping, independant
      of the application and user interface. So if it belongs with other like
      data, put it there. For example above we would store serviceLevel as an
      enumerated type in the WFSDTO object. But if we also wanted to store
      serviceLevels for the WMS service this information would be stored in
      the ServiceDTO Object, with the enumeration of types residing in the
      WFSDTO and WMSDTO Objects respectively.</para>

      <section>
        <title>Data Transfer Object Extension</title>

        <para>Make sure all of the following tasks have been completed
        (example from <filename>WFSDTO.java</filename>):</para>

        <itemizedlist>
          <listitem>
            <para>Update default construtor</para>

            <programlisting>public WFSDTO(){
<emphasis role="bold"><emphasis role="bold">    serviceLevel = WFSDTO.BASIC;</emphasis></emphasis>
}</programlisting>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>Update parametarized constructor used to clone</para>

            <programlisting>public WFSDTO(WFSDTO other) {
    if (other == null) {
        throw new NullPointerException(&#34;Data Transfer Object required&#34;);
    }

    service = (ServiceDTO) new ServiceDTO(other.getService());
    gmlPrefixing = other.isGmlPrefixing();
    <emphasis role="bold">serviceLevel = WFSDTO.getServiceLevel();</emphasis>
}</programlisting>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>Update equals method</para>

            <programlisting>public boolean equals(Object other) {
    if ((other == null) || !(other instanceof WFSDTO)) {
        return false;
    }

    WFSDTO dto = (WFSDTO) other;

    return (<emphasis role="bold">serviceLevel == dto.getServiceLevel() &#38;&#38;</emphasis> (service == null) ? (dto.getService() == null) 
        : service.equals(dto.getService()));
}</programlisting>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>Generate getter and setter methods</para>

            <programlisting><emphasis role="bold">public int getServiceLevel(){
    return serviceLevel;
}

public void setServiceLevel(int serviceLevel){
    this.serviceLevel = serviceLevel;
}</emphasis></programlisting>
          </listitem>
        </itemizedlist>

        <itemizedlist>
          <listitem>
            <para>Document the changes in the source code</para>

            <programlisting><emphasis role="bold">/** ServiceLevel bit used to indicate Basic support */
public static final int SERVICE_BASIC = 1;

/** ServiceLevel bit used to indicate Transaction Insert support */
public static final int SERVICE_INSERT = 2;

/** ServiceLevel bit used to indicate Transaction Update support */
public static final int SERVICE_UPDATE = 4;

/** ServiceLevel bit used to indicate Transaction Delete support */
public static final int SERVICE_DELETE = 8;

/** ServiceLevel bit used to indicate Locking support */
public static final int SERVICE_LOCKING = 16;

/** ServiceLevel mask equivilent to basic WFS conformance */
public static final int BASIC = 1;

/** ServiceLevel mask for transactional WFS conformance. */
public static final int TRANSACTIONAL = SERVICE_BASIC | SERVICE_INSERT
        | SERVICE_UPDATE | SERVICE_DELETE;

/** ServiceLevel mask equivilent to complete WFS conformance */
public static final int COMPLETE = TRANSACTIONAL | SERVICE_LOCKING;
</emphasis></programlisting>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>XMLConfigReader</title>

      <para>Extending the XML Reader is relatively easy to complete, but
      equally easy to break the application. As a general warning if you are
      not happy playing with DOM trees you should brush up on your XML skills
      before entering this stage of developement.</para>

      <para>The file XMLConfigReader may extended at several locations:</para>

      <itemizedlist>
        <listitem>
          <para>XMLConfigReader( File rootDir ) - calls load method on
          creation</para>
        </listitem>

        <listitem>
          <para>load() - extend to add support for additional configuration
          files</para>
        </listitem>

        <listitem>
          <para>loadService(Element) - extend for parsing common to both WMS
          and WFS</para>
        </listitem>

        <listitem>
          <para>loadWMS(Element) - extend for parsing Web Map Server</para>
        </listitem>

        <listitem>
          <para>loadWFS(Element) - extend for parsing Web Feature Server</para>
        </listitem>

        <listitem>
          <para>loadGlobal(Elemenet) - extend for parsing GeoServerDTO</para>
        </listitem>

        <listitem>
          <para>load</para>
        </listitem>
      </itemizedlist>

      <para>For the DOM efficiados out there all you need to do is add the
      code to read the Element at the correct point in the file which you
      intend to read from. Often this is easier said than done, but once
      completed place the data into the DTO object.</para>

      <para>The best advice I have for you is to be VERY careful of your
      element pointer withing the DOM tree. If you inadvertantly affect this
      pointer, all other parsing one the remaining interior branches of that
      tree will not be parsed correctly, mostlikely breaking atleast part of
      the application.</para>

      <para>How to be VERY careful? Try one of the following:</para>

      <itemizedlist>
        <listitem>
          <para>make a private method an pass the ref in - for an example
          check out</para>
        </listitem>

        <listitem>
          <para>make a copy of the reference before playing with it</para>
        </listitem>
      </itemizedlist>

      <para>Just like the previous step, I have included a short list to help
      ensure you have completed everything (example <filename>XMLConfigReader.java</filename>).</para>

      <itemizedlist>
        <listitem>
          <para>Ensure you have not affected the Element references around you
          new addition (XMLConfigReader.processSchema() )</para>

          <programlisting>// SAFER
<emphasis role="bold">elem</emphasis> = ReaderUtils.getChildElement(elem, &#34;xs:sequence&#34;);
NodeList nl = elem.getElementsByTagName(&#34;xs:element&#34;);
for (int i = 0; i &#60; nl.getLength(); i++) {
    // one element now
    Element <emphasis role="bold">element</emphasis> = (Element) nl.item(i);</programlisting>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Test the application to ensure it is not broken (ie. run cite
          tests)</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Document the changes in the source code</para>

          <programlisting>elem = ReaderUtils.getChildElement(elem, &#34;xs:sequence&#34;);
NodeList nl = elem.getElementsByTagName(&#34;xs:element&#34;);
for (int i = 0; i &#60; nl.getLength(); i++) {
    <emphasis role="bold">// Create a new reference to walk through all the child nodes</emphasis>
    Element element = (Element) nl.item(i);</programlisting>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Ensure you have included informative error messages where
          appropriate.</para>

          <programlisting>// Bad 
catch(ConfigurationException e){
   throw new ConfigurationException(<emphasis role="bold">&#34;io error&#34;</emphasis>);
}


// Good
catch(ConfigurationException e){
   throw new ConfigurationException(<emphasis role="bold">&#34;Error occured in &#34;+schemaFile+&#34;\n&#34;+e.getMessage(),e</emphasis>);
}</programlisting>
        </listitem>
      </itemizedlist>

      <section>
        <title>Optimization</title>

        <para>You may optimize this process for speed (rather than saftey):</para>

        <programlisting>// UNSAFE - see the real code example above for comparison
elem = ReaderUtils.getChildElement(elem, &#34;xs:sequence&#34;);
NodeList nl = elem.getElementsByTagName(&#34;xs:element&#34;);
for (int i = 0; i &#38;#60; nl.getLength(); i++) {
    // one element now
    elem = (Element) nl.item(i);</programlisting>

        <para>And once again be VERY careful, if you loose the readers place
        in the DOM tree. The errors will not be thrown from your code, but
        from else where in the reading process.</para>
      </section>
    </section>

    <section>
      <title>Updating GeoServer</title>

      <para>The classes that make up the GeoServer application are contained
      the global package.</para>

      <para>As far as guidance here, there are two parts: data
      storage/retrieval and the rest or it.</para>

      <para>For part one, store the data and provide an accessor method which
      is appropriate. You will also have to update a few methods listed below
      to keep the class up-to-date.</para>

      <para>You are now into the application. Carefully do whatever your plans
      for this data included. Test, test and test again. When all looks good,
      move on to the next stage.</para>

      <itemizedlist>
        <listitem>
          <para>Update default construtor</para>

          <programlisting>WFS() {
    super(new ServiceDTO());
    <emphasis role="bold">serviceLevel = WFSDTO.BASIC; // use the DTO def, as it permutates the whole app</emphasis>
}</programlisting>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Update parametarized constructor used to clone</para>

          <programlisting>public WFS(WFSDTO config) {
    super(config.getService());
    gmlPrefixing = config.isGmlPrefixing();
    <emphasis role="bold">serviceLevel = config.getServiceLevel();</emphasis>
}</programlisting>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Update load method used to import DTO objects</para>

          <programlisting>public void load (WFSDTO config) {
    super.load(config.getService());
    gmlPrefixing = config.isGmlPrefixing();
<emphasis role="bold">    serviceLevel = config.getServiceLevel();</emphasis>
}</programlisting>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Update toDTO method used to export data as a DTO object</para>

          <programlisting>public Object toDTO() {
    WFSDTO dto = new WFSDTO();
    dto.setService((ServiceDTO)super.toDTO());
    dto.setGmlPrefixing(gmlPrefixing);
    <emphasis role="bold">dto.setServiceLevel(serviceLevel);</emphasis>

    return dto;
}</programlisting>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Add accessor method</para>

          <programlisting><emphasis role="bold">public int getServiceLevel(){
    return serviceLevel;
}]
</emphasis></programlisting>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Test the application to ensure it is not broken (ie. run cite
          tests)</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Document the changes in the source code</para>

          <programlisting><emphasis role="bold">/**
 * the level of service for this WFS provider
 */
private int serviceLevel = WFSDTO.BASIC;</emphasis></programlisting>
        </listitem>
      </itemizedlist>

      <para>Once again we will use our serviceType example.</para>
    </section>

    <section>
      <title>XMLConfigWriter</title>

      <para>This portion is the reverse of the XML Reader. You need to add the
      write methods for your new data. Try to use the element write methods
      provided. Also you should be careful to match tags ... . Remember to
      test this code as well, because this code will break the application as
      badly as the reader next time you run it.</para>

      <itemizedlist>
        <listitem>
          <para>Test the application to ensure it is not broken (ie. run cite
          tests)</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Document the changes in the source code</para>

          <programlisting><emphasis role="bold">// write the service level if not basic (our default)</emphasis> 
if ((wfs.getTitle() != null) &#38;&#38; (wfs.getTitle() != WFSDTO.BASIC)) {
    cw.textTag(&#34;serviceLevel&#34;, wfs.getServiceLevel()+&#34;&#34;);
}</programlisting>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Ensure you have included informative error messages where
          appropriate.</para>

          <programlisting>// Bad 
catch(ConfigurationException e){
   throw new ConfigurationException(<emphasis role="bold">&#34;io error&#34;</emphasis>);
}


// Good
catch(ConfigurationException e){
   throw new ConfigurationException(<emphasis role="bold">&#34;Error occured in WFS service configuration output.\n&#34;+e.getMessage(),e</emphasis>);
}</programlisting>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Configuration User Interface</title>

    <para>To add the ability to alter the serviceLevel in the configuration
    interface, one must alter the the JSP page where the it will be altered,
    as well as the ActionForm and Actions which communicate with the GeoServer
    configuration.</para>

    <para>Before you begin you must decide where in the interface you want the
    control to appear on, as the configuration files that pertain to STRUTS
    are split up to mirror the pages. The WFS Description page contains fields
    pertaining to information about the WFS, whereas the Content page contains
    fields which actually affect the way the WFS operates.</para>

    <para>Because we are adding a serviceLevel field which defines the
    services that the WFS provides, our example will modify the Content page.</para>

    <section>
      <title>Config</title>

      <para>We have isolated Configuration Information, from the GeoServer
      Application Information currently being used. Configuration information
      is captured by a series of classes in the config package. The Advantage
      of this approach is that it gives us a chance to recast concepts into
      terms acceptable to the user interface.</para>

      <para>Update WFSConfig so it can properly communicate with the DTO
      object. This is kept simple by adding the property, including getter and
      setter, and initializing/saving it where appropriate.</para>

      <itemizedlist>
        <listitem>
          <para>You must add the property to the ActionForm. In this case,
          org.vfny.geoserver.form.wfs.WFSContentForm.</para>

          <programlisting><emphasis role="bold">private int serviceLevel;</emphasis></programlisting>
        </listitem>

        <listitem>
          <para>And then the getters and setters.</para>

          <programlisting><emphasis role="bold">/**
 * Access serviceLevel property.
 * 
 * @return Returns the serviceLevel.
 */
public int getServiceLevel() {
   return serviceLevel;
}

/**
 * Set serviceLevel to serviceLevel.
 *
 * @param serviceLevel The serviceLevel to set.
 */
public void setServiceLevel(int serviceLevel) {
   this.serviceLevel = serviceLevel;
}</emphasis></programlisting>
        </listitem>

        <listitem>
          <para>In WFSConfigContentForm.reset add a call to retrieve the
          current service level from GeoServer&#39;s configuration.</para>

          <programlisting>        WFSConfig config = (WFSConfig) context.getAttribute(WFSConfig.CONFIG_KEY);
        
        <emphasis role="bold">serviceLevel = config.getServiceLevel();</emphasis>
        this.enabled = config.isEnabled();</programlisting>
        </listitem>

        <listitem>
          <para>In WFSConfigContentForm.validate(), add code to make sure a
          valid service level was selected. The argument to the ActionError
          constructor is a String containing the key to a message located in
          the ApplicationResources.</para>

          <programlisting><emphasis role="bold">        if (serviceLevel != WFSDTO.BASIC &#38;&#38; serviceLevel != WFSDTO.TRANSACTION) {
            errors.add(&#34;serviceLevel&#34;, new ActionError(&#34;error.serviceLevel.invalid&#34;));
        }</emphasis></programlisting>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>ActionForm (or FormBean)</title>

      <para>Subclasses of ActionForm (called form beans ) communicate the
      state of an HTML form to the Struts framework.</para>

      <para>For our purposes we need to pay attention to the following steps:</para>

      <itemizedlist>
        <listitem>
          <para>reset - used to set up the FormBean before being sent off to
          the user</para>
        </listitem>

        <listitem>
          <para>populate - used to sync the FormBean with any input from the
          HTML form</para>
        </listitem>

        <listitem>
          <para>validate - used to do a sanity check of the form, and provide
          the user with quick feedback</para>
        </listitem>
      </itemizedlist>

      <para>For our example we will be changing the WFSContentActionForm.</para>

      <para>Here we need to update WFSConfigContentForm to allow the JSP to
      access and set the serviceLevel property, as well as validate the input
      before passing it to the Action.</para>

      <para>We have a couple of options on how we want to present serviceLevel
      to the FormBean:</para>

      <itemizedlist>
        <listitem>
          <para>As a magic integer - plug and pray approach</para>
        </listitem>

        <listitem>
          <para>As a select control based around OGC complient categorizations</para>
        </listitem>

        <listitem>
          <para>As a series of check boxes representing the levels of service</para>
        </listitem>
      </itemizedlist>

      <para>We have decided to go with a select control of &#34;Basic&#34;,
      &#34;Transactional&#34;, &#34;Complete&#34; since these are documented
      user level concepts.</para>

      <para>Here is our quick checklist:</para>

      <itemizedlist>
        <listitem>
          <para>You must add the property to the ActionForm. In this case,
          org.vfny.geoserver.form.wfs.WFSContentForm.</para>

          <programlisting><emphasis role="bold">private int serviceLevel;</emphasis></programlisting>
        </listitem>

        <listitem>
          <para>And then the getters and setters.</para>

          <programlisting><emphasis role="bold">/**
 * Access serviceLevel property.
 * 
 * @return Returns the serviceLevel.
 */
public int getServiceLevel() {
   return serviceLevel;
}

/**
 * Set serviceLevel to serviceLevel.
 *
 * @param serviceLevel The serviceLevel to set.
 */
public void setServiceLevel(int serviceLevel) {
   this.serviceLevel = serviceLevel;
}</emphasis></programlisting>
        </listitem>

        <listitem>
          <para>In WFSConfigContentForm.reset add a call to retrieve the
          current service level from GeoServer&#39;s configuration.</para>

          <programlisting>        WFSConfig config = (WFSConfig) context.getAttribute(WFSConfig.CONFIG_KEY);
        
        <emphasis role="bold">serviceLevel = config.getServiceLevel();</emphasis>
        this.enabled = config.isEnabled();</programlisting>
        </listitem>

        <listitem>
          <para>In WFSConfigContentForm.validate(), add code to make sure a
          valid service level was selected. The argument to the ActionError
          constructor is a String containing the key to a message located in
          the ApplicationResources.</para>

          <programlisting><emphasis role="bold">        if (serviceLevel != WFSDTO.BASIC &#38;&#38; serviceLevel != WFSDTO.TRANSACTION) {
            errors.add(&#34;serviceLevel&#34;, new ActionError(&#34;error.serviceLevel.invalid&#34;));
        }</emphasis></programlisting>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Action</title>

      <para>Actions in struts are used to actually do something. Their execute
      method is called with a validated FormBean.</para>

      <para>For our example we are going to be changing the
      WFSConfigContentAction.</para>

      <para>All that is need to be changed here is a simple call to that saves
      the selected service level into the configuration.</para>

      <para>in WFSConfigContentAction.execute(), add this to save the service
      level when it is changed in the interface.</para>

      <programlisting>        WFSConfig config = getWFSConfig();
        config.setEnabled(enabled);
        config.setOnlineResource(new URL(onlineResource));
        <emphasis role="bold">config.setServiceLevel(contentForm.getServiceLevel());</emphasis></programlisting>
    </section>

    <section>
      <title>Java Server Pages</title>

      <para>Here we simply add the control to the appropriate JSP page. Make
      sure it is within the &#60;html:form&#62; tag that is associated with
      the ActionForm you changed. In this example, we must make sure to place
      it within the &#60;html:form
      action=&#34;WFSConfigContentSubmit&#34;&#62; tag. Familiarty with the
      STRUTS HTML and logic tag libraries really helps here.</para>

      <para>Add the following to WFSConfigContent.jsp where ever you want the
      textbox to appear. It creates a select box with two options in it. One
      for basic, one for transactional. This is just an example. Feel free to
      do whatever you want with the control.</para>

      <programlisting><emphasis role="bold">&#60;tr&#62;
  &#60;td class=&#34;label&#34;&#62;
    &#60;span class=&#34;help&#34; title=&#34;&#60;bean:message key=&#34;help.serviceLevel&#34;/&#62;&#34;&#62;
      &#60;bean:message key=&#34;label.serviceLevel&#34;/&#62;:
    &#60;/span&#62;
  &#60;/td&#62;
  &#60;td class=&#34;datum&#34;&#62;
   &#60;html:select property=&#34;serviceLevel&#34; size=&#34;3&#34;&#62;
      &#60;html:option key=&#34;label.serviceLevel.basic&#34; value=&#34;&#60;%= java.lang.Integer.toString(org.vfny.geoserver.global.dto.WFSDTO.BASIC) %&#62;&#34;/&#62;
      &#60;html:option key=&#34;label.serviceLevel.transactional&#34; value=&#34;&#60;%= java.lang.Integer.toString(org.vfny.geoserver.global.dto.WFSDTO.TRANSACTIONAL) %&#62;&#34;/&#62;
      &#60;html:option key=&#34;label.serviceLevel.complete&#34; value=&#34;&#60;%= java.lang.Integer.toString(org.vfny.geoserver.global.dto.WFSDTO.COMPLETE) %&#62;&#34;/&#62;
   &#60;/html:select&#62;
&#60;/td&#62;&#60;/tr&#62;</emphasis></programlisting>
    </section>

    <section>
      <title>ApplicationResources</title>

      <para>Here we must add each of the messages we have created to the
      ApplicationResource file. This file allows for centralized String
      messages and for easy internationalization.</para>

      <para>in ApplicationResources.properties, add the appropriate keys.
      Order doesn&#39;t matter.</para>

      <programlisting><emphasis role="bold">error.serviceLevel.invalid=Invalid service level selected
help.serviceLevel=Defines the level of service that the WFS provides
label.serviceLevel=Service Level
label.serviceLevel.basic=Basic
label.serviceLevel.transactional=Transactional</emphasis></programlisting>
    </section>
  </section>

  <section>
    <title>Using GeoServer Application Information</title>

    <para>Now that you have updated the GeoServer application you can make use
    of your information at runtime. The GeoServer application is stored in the
    web context, and we have provided several convience methods to allow
    access.</para>

    <para>HttpRequest based access:</para>

    <programlisting>HttpRequest httpRequest = (HttpRequest) servletRequest;
Requests.getWFS( httpRequest ).getServiceLevel()</programlisting>

    <section>
      <title>GeoServer Framework (Request/Response/AbstractService)</title>

      <para>GeoServer is broken down into various Servlets implemented by
      decendents of AbstractService. You can use the Request objects to access
      configuration information when handling a Response.</para>

      <para>TransactionResponse example:</para>

      <programlisting>protected void execute(TransactionRequest transactionRequest){
  if( (Request.getWFS().getServiceLevel() | WFSDTO.DELETE ) == 0 ){
    throw ServiceException(&#34;Transaction Delete not supported&#34;);
  }
}</programlisting>
    </section>

    <section>
      <title>Java Server Pages</title>

      <para>Java Server Pages allow direct access to objects stored in the web
      container.</para>

      <para>Java Server Pages Example:</para>

      <programlisting>ServiceLevel:&#60;bean:write name=&#34;Global.WFS&#34; property=&#34;serviceLevel&#34;/&#62;</programlisting>
    </section>

    <section>
      <title>Struts (Action)</title>

      <para>You may also reference GeoServer application information when
      implementing your own Java Server Pages as part of the GeoServer
      application.</para>

      <para>GeoServerAction example:</para>

      <programlisting>Redirect execute( HttpServletRequest request, ){
  if ( (getWFS( request ).getServiceLevel() | WFSDTO.LOCKING ) == 0 ){
     throw ServiceException(&#34;Cannot Manage Locks as Locking has been disabled&#34;);
  }
  ...
}</programlisting>
    </section>
  </section>
</article>