/* Copyright (c) 2001 - 2007 TOPP - www.openplans.org. All rights reserved.
 * This code is licensed under the GPL 2.0 license, availible at the root
 * application directory.
 */
package org.geoserver.security;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.servlet.http.HttpServletRequest;

import org.acegisecurity.GrantedAuthorityImpl;
import org.acegisecurity.ui.webapp.AuthenticationProcessingFilter;
import org.acegisecurity.userdetails.memory.UserAttribute;

import sun.misc.BASE64Decoder;

//TODO: tweak the spring context so that the editable user DAO is used
//TODO: do some kind of setup so we can share cookies with an openplans instance and test this thing

/**
 * A little variant on the {@link AuthenticationProcessingFilter} that extracts
 * the login information from a cookie generated by openplans.org
 * 
 * @author David Winslow - TOPP
 */
public class OpenPlansAuthenticationProcessingFilter
//extends		AuthenticationProcessingFilter 
{
	
	EditableUserDAO myUserDAO;
	
	public OpenPlansAuthenticationProcessingFilter(EditableUserDAO eud){
	  super();
	  myUserDAO = eud;
	}
	
	protected String obtainPassword(HttpServletRequest request) {
		String[] pair = null; // getUserAndPassword(request);
		System.out.println("pwd: " + pair[1]);
		return pair[1];
	}

	protected String obtainUsername(HttpServletRequest request) {
		String user = null; //getUserAndPassword(request)[0];
		
		if (myUserDAO.loadUserByUsername(user) == null){
			try{
				myUserDAO.setUserDetails(user, getDefaultUserAttributes(user));
			} catch(Exception e){
				return null;
			}
		}
		return user;
	}

	private UserAttribute getDefaultUserAttributes(String name) {
		UserAttribute ua =  new UserAttribute();
		ua.setPassword(getAuth(name)); 
		ua.setEnabled(true);
		ua.addAuthority(new GrantedAuthorityImpl("ROLE_USER"));
		return ua;
	}

	private String getAuth(String username) {
		final String secret = "123openplans";
		String auth = "";
		SecretKeySpec key = new SecretKeySpec(secret.getBytes(), "SHA");
		try {
			Mac mac = Mac.getInstance("HmacSHA1");
			mac.init(key);
			mac.update(username.getBytes());
			byte[] result = (mac.doFinal());
			String charmap = "0123456789abcdef";
			for (int i = 0; i < result.length; i++) {
				int first = (result[i] >> 4) & 0x0f;
				int second = result[i] & 0x0f;
				auth += (charmap.charAt(first));
				auth += (charmap.charAt(second));
			}
		} catch (Exception nsae) {
			nsae.printStackTrace();
		}

		System.out.println("set: " + auth);
		return auth;
	}

}
