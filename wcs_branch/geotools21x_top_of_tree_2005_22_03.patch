Index: module/main/src/org/geotools/data/coverage/grid/file/FileMetadataImpl.java
===================================================================
--- module/main/src/org/geotools/data/coverage/grid/file/FileMetadataImpl.java	(revision 12514)
+++ module/main/src/org/geotools/data/coverage/grid/file/FileMetadataImpl.java	(working copy)
@@ -28,7 +28,7 @@
  * A simple implementation of FileMetadata
  *
  * @author jeichar
- *
+ * @author <a href="mailto:simboss_ml@tiscali.it">Simone Giannecchini (simboss)</a>
  */
 public class FileMetadataImpl extends AbstractMetadataEntity implements FileMetadata {
     String name;
Index: module/main/src/org/geotools/data/coverage/grid/file/FileSystemGridCoverageExchange.java
===================================================================
--- module/main/src/org/geotools/data/coverage/grid/file/FileSystemGridCoverageExchange.java	(revision 12514)
+++ module/main/src/org/geotools/data/coverage/grid/file/FileSystemGridCoverageExchange.java	(working copy)
@@ -46,6 +46,7 @@
  * Is both a GridCoverageExchange and a Catalog
  *
  * @author $author$
+ * @author <a href="mailto:simboss_ml@tiscali.it">Simone Giannecchini (simboss)</a>
  * @version $Revision: 1.9 $
  */
 public class FileSystemGridCoverageExchange extends AbstractCatalog
@@ -230,4 +231,4 @@
             refresh(root);
         }
     }
-}
+}
\ No newline at end of file
Index: module/main/src/org/geotools/data/coverage/grid/file/FormatFileFilter.java
===================================================================
--- module/main/src/org/geotools/data/coverage/grid/file/FormatFileFilter.java	(revision 12514)
+++ module/main/src/org/geotools/data/coverage/grid/file/FormatFileFilter.java	(working copy)
@@ -27,6 +27,7 @@
  * DOCUMENT ME!
  *
 *  @author Jesse Eichar
+ * @author <a href="mailto:simboss_ml@tiscali.it">Simone Giannecchini (simboss)</a>
  * @author $author$ (Last Modified)
  * @version $Revision: 1.9 $
  */
Index: module/main/src/org/geotools/data/coverage/grid/AbstractGridFormat.java
===================================================================
--- module/main/src/org/geotools/data/coverage/grid/AbstractGridFormat.java	(revision 12514)
+++ module/main/src/org/geotools/data/coverage/grid/AbstractGridFormat.java	(working copy)
@@ -44,7 +44,7 @@
  * }</code>
  *
  * @author jeichar
- *
+ * @author <a href="mailto:simboss_ml@tiscali.it">Simone Giannecchini (simboss)</a>
  * @see AbstractFormatFactory
  */
 public abstract class AbstractGridFormat implements Format {
@@ -136,4 +136,4 @@
    */
   public  ParameterValueGroup getWriteParameters() {return this.writeParameters;}
 
-  }
+  }
\ No newline at end of file
Index: module/main/src/org/geotools/data/coverage/grid/UnknownFormat.java
===================================================================
--- module/main/src/org/geotools/data/coverage/grid/UnknownFormat.java	(revision 12514)
+++ module/main/src/org/geotools/data/coverage/grid/UnknownFormat.java	(working copy)
@@ -28,6 +28,7 @@
  *
 *  @author Jesse Eichar
  * @author $author$ (Last Modified)
+ * @author <a href="mailto:simboss_ml@tiscali.it">Simone Giannecchini (simboss)</a>
  * @version $Revision: 1.9 $
  */
 public class UnknownFormat extends AbstractGridFormat implements Format {
@@ -80,4 +81,4 @@
     }
 
 
-}
+}
\ No newline at end of file
Index: module/main/src/org/geotools/data/coverage/grid/stream/StreamGridCoverageExchange.java
===================================================================
--- module/main/src/org/geotools/data/coverage/grid/stream/StreamGridCoverageExchange.java	(revision 12514)
+++ module/main/src/org/geotools/data/coverage/grid/stream/StreamGridCoverageExchange.java	(working copy)
@@ -45,6 +45,7 @@
  * A simple stateless GridCoverageExchange that will write/read to/from files and streams
  *
  * @author jeichar
+ * @author <a href="mailto:simboss_ml@tiscali.it">Simone Giannecchini (simboss)</a>
  */
 public class StreamGridCoverageExchange implements GridCoverageExchange {
     Set formats=new java.util.HashSet();
@@ -184,4 +185,4 @@
     public boolean setDataSource(Object datasource) {
         return isLegalSource(datasource);
     }
-}
+}
\ No newline at end of file
Index: plugin/image/test/org/geotools/gce/image/WorldImageReaderTest.java
===================================================================
--- plugin/image/test/org/geotools/gce/image/WorldImageReaderTest.java	(revision 12514)
+++ plugin/image/test/org/geotools/gce/image/WorldImageReaderTest.java	(working copy)
@@ -11,7 +11,7 @@
 
 import junit.framework.TestCase;
 
-import org.geotools.coverage.grid.GridCoverageImpl;
+import org.geotools.coverage.grid.GridCoverage2D;
 import org.geotools.resources.TestData;
 
 /**
@@ -29,7 +29,7 @@
 	 */
 	protected void setUp() throws Exception {
 		super.setUp();
-		File imageFile = TestData.file(this, "etopo.png");
+		File imageFile = TestData.file(this, "usa.png");
 		wiReader = new WorldImageReader(imageFile);
 	}
 
@@ -47,7 +47,7 @@
 	public void testRead() throws IOException {
 		org.opengis.coverage.grid.GridCoverage coverage = wiReader.read(null);
 		assertNotNull(coverage);
-		assertNotNull(((GridCoverageImpl)coverage).getRenderedImage());
+		assertNotNull(((GridCoverage2D)coverage).getRenderedImage());
 		assertNotNull(coverage.getEnvelope());
 	}
 }
Index: plugin/image/src/org/geotools/gce/image/WorldImageWriter.java
===================================================================
--- plugin/image/src/org/geotools/gce/image/WorldImageWriter.java	(revision 12514)
+++ plugin/image/src/org/geotools/gce/image/WorldImageWriter.java	(working copy)
@@ -26,7 +26,7 @@
 
 import javax.imageio.ImageIO;
 
-import org.geotools.coverage.grid.GridCoverageImpl;
+import org.geotools.coverage.grid.GridCoverage2D;
 import org.opengis.coverage.MetadataNameNotFoundException;
 import org.opengis.coverage.grid.FileFormatNotCompatibleWithGridCoverageException;
 import org.opengis.coverage.grid.Format;
@@ -123,7 +123,7 @@
 	public void write(GridCoverage coverage, GeneralParameterValue[] parameters)
 			throws IllegalArgumentException, IOException {
 		
-		RenderedImage image = ((GridCoverageImpl)coverage).getRenderedImage();
+		RenderedImage image = ((GridCoverage2D)coverage).getRenderedImage();
 		
 		Envelope env = coverage.getEnvelope();
 		double xMin = env.getMinimum(0);
Index: plugin/image/src/org/geotools/gce/image/WorldImageReader.java
===================================================================
--- plugin/image/src/org/geotools/gce/image/WorldImageReader.java	(revision 12514)
+++ plugin/image/src/org/geotools/gce/image/WorldImageReader.java	(working copy)
@@ -27,7 +27,7 @@
 
 import javax.imageio.ImageIO;
 
-import org.geotools.coverage.grid.GridCoverageImpl;
+import org.geotools.coverage.grid.GridCoverage2D;
 import org.geotools.geometry.GeneralEnvelope;
 import org.geotools.referencing.crs.GeographicCRS;
 import org.opengis.coverage.MetadataNameNotFoundException;
@@ -52,6 +52,10 @@
  */
 public class WorldImageReader implements GridCoverageReader {
 
+	public static int WORLD_WLD = 1;
+	public static int WORLD_META = 2;
+	public static int WORLD_BASE = 3;
+	
 	private Object source;
     private boolean gridLeft = true;
 
@@ -178,42 +182,86 @@
 		float yLoc = 0;
 		
         BufferedReader in = null;
-
+	int world_type = -1;
+	
         try {
         	URL worldURL = new URL(base+".wld");
         	in = new BufferedReader(new InputStreamReader(worldURL.openStream()));
-		} catch (FileNotFoundException e) {
-			//.wld extension not found, go for file based one.
+		world_type = WORLD_WLD;
+	} catch (FileNotFoundException e1) {
+		try {
+			//.wld extension not found, go for .meta.
+			URL worldURL = new URL(base+".meta");
+			in = new BufferedReader(new InputStreamReader(worldURL.openStream()));
+			world_type = WORLD_META;
+		} catch (FileNotFoundException e2) {
+			//.wld & .meta extension not found, go for file based one.
 			URL worldURL = new URL(base+WorldImageFormat.getWorldExtension(fileExtension));
 			in = new BufferedReader(new InputStreamReader(worldURL.openStream()));
+			world_type = WORLD_BASE;
 		}
+	}
         
         String str;
         index = 0;
+
+		double xMin = 0.0;
+		double yMax = 0.0;
+		double xMax = 0.0;
+		double yMin = 0.0;
+
         while ((str = in.readLine()) != null) {
-        	float value = Float.parseFloat(str.trim());
-        	switch(index) {
-        		case 0:
-        			xPixelSize = value;
-        			break;
-        		case 1:
-        			rotation1 = value;
-        			break;
-        		case 2:
-        			rotation2 = value;
-        			break;
-        		case 3:
-        			yPixelSize = value;
-        			break;
-        		case 4:
-        			xLoc = value;
-        			break;
-        		case 5:
-        			yLoc = value;
-        			break;
-        		default:
-        			break;
-        	}
+        	
+		if( world_type == WORLD_WLD || world_type == WORLD_BASE ) {
+			float value = Float.parseFloat(str.trim());
+			switch(index) {
+				case 0:
+					xPixelSize = value;
+					break;
+				case 1:
+					rotation1 = value;
+					break;
+				case 2:
+					rotation2 = value;
+					break;
+				case 3:
+					yPixelSize = value;
+					break;
+				case 4:
+					xLoc = value;
+        				break;
+				case 5:
+	        			yLoc = value;
+        				break;
+				default:
+        				break;
+	        	}
+		} else if( world_type == WORLD_META ) {
+			String line = str;
+			rotation1 = 0.0f;
+			rotation2 = 0.0f;
+			double value;
+			switch(index) {
+				case 1:
+					value = Double.parseDouble(line.substring("Origin Longitude = ".length()));
+					xMin = value;
+					break;
+				case 2:
+					value = Double.parseDouble(line.substring("Origin Latitude = ".length()));
+					yMin = value;
+					break;
+				case 3:
+					value = Double.parseDouble(line.substring("Corner Longitude = ".length()));
+					xMax = value;
+					break;
+				case 4:
+					value = Double.parseDouble(line.substring("Corner Latitude = ".length()));
+					yMax = value;
+        				break;
+				default:
+        				break;
+	        	}
+		}
         	index++;
         }
         in.close();
@@ -224,10 +272,12 @@
 		CoordinateReferenceSystem crs = GeographicCRS.WGS84;
 		Envelope envelope = null;
 		
-		double xMin = xLoc;
-		double yMax = yLoc;
-		double xMax = xLoc + (image.getWidth()*xPixelSize);
-		double yMin = yLoc + (image.getHeight()*yPixelSize);
+		if( world_type == WORLD_WLD || world_type == WORLD_BASE ) {
+			xMin = xLoc;
+			yMax = yLoc;
+			xMax = xLoc + (image.getWidth()*xPixelSize);
+			yMin = yLoc + (image.getHeight()*yPixelSize);
+		}
 
 		envelope = new GeneralEnvelope(new double[] {xMin, yMin}, new double[] {xMax, yMax});
 
@@ -235,17 +285,11 @@
 		
 		GridCoverage coverage = null;
 		try {
-			coverage = new GridCoverageImpl(
-					sourceURL.getFile(), crs, null, null, image, envelope);
-		} catch (OperationNotFoundException e1) {
-			// TODO Auto-generated catch block
-			e1.printStackTrace();
+			coverage = new GridCoverage2D(
+					sourceURL.getFile(), image, crs, envelope);
 		} catch (NoSuchElementException e1) {
 			// TODO Auto-generated catch block
 			e1.printStackTrace();
-		} catch (FactoryException e1) {
-			// TODO Auto-generated catch block
-			e1.printStackTrace();
 		}
 		return coverage;
 	}
Index: plugin/arcgrid/test/org/geotools/gce/arcgrid/ArcGridReadWriteTest.java
===================================================================
--- plugin/arcgrid/test/org/geotools/gce/arcgrid/ArcGridReadWriteTest.java	(revision 12514)
+++ plugin/arcgrid/test/org/geotools/gce/arcgrid/ArcGridReadWriteTest.java	(working copy)
@@ -9,7 +9,7 @@
 import java.awt.image.Raster;
 import java.io.File;
 
-import org.geotools.coverage.grid.GridCoverageImpl;
+import org.geotools.coverage.grid.GridCoverage2D;
 import org.geotools.resources.TestData;
 import org.opengis.coverage.grid.Format;
 import org.opengis.coverage.grid.GridCoverage;
@@ -63,7 +63,7 @@
 
     void test(TestParams testParam) throws Exception {
 
-    //create a temporary output file
+   //create a temporary output file
     //temporary file to use
     File tmpFile = null;
     if (testParam.compressed)
@@ -80,13 +80,25 @@
     Format f = new ArcGridFormat();
 
     //setting general format parameteres to be used later on
-    ParameterValueGroup params = null;
+    ParameterValueGroup params = f.getReadParameters();
+    params.parameter("Compressed").setValue(testParam.compressed);
+    params.parameter("GRASS").setValue(testParam.grass);
+    params = f.getWriteParameters();
+    params.parameter("Compressed").setValue(testParam.compressed);
+    params.parameter("GRASS").setValue(testParam.grass);
 
     /*Step 1 read it*/
 
     //read in the grid coverage
     GridCoverageReader reader = new ArcGridReader((TestData.getResource(this,testParam.fileName )));
+    params = reader.getFormat().getReadParameters();
 
+    //setting params
+    params.parameter("Compressed").setValue(f.getReadParameters().parameter(
+        "Compressed").booleanValue());
+    params.parameter("GRASS").setValue(f.getReadParameters().parameter("GRASS").
+                                       booleanValue());
+
     //reading the coverage
     GridCoverage gc1 = reader.read(null); //
 //            (GeneralParameterValue[]) params.values().toArray(new GeneralParameterValue[params.values().size()])
@@ -110,7 +122,7 @@
     //read the grid coverage back in from temp file
     reader = new ArcGridReader(tmpFile);
 
-    //setting params (ATTENTION It is performed just to show how we colud do that, but it is useless here)
+    //setting params
     params = reader.getFormat().getReadParameters();
     params.parameter("Compressed").setValue(f.getReadParameters().parameter(
         "Compressed").booleanValue());
@@ -136,14 +148,12 @@
 
         Envelope e1 = gc1.getEnvelope();
         Envelope e2 = gc2.getEnvelope();
-        if (!e1.equals(e2)) {
-            throw new Exception("GridCoverage Envelopes are not equal");
-        }
-
+        if(e1.equals(e2))
+            throw new Exception("GridCoverage Envelopes are not equal" + e1.toString() + e2.toString());
         double[] values1 = null;
         double[] values2 = null;
-        Raster r1 = ((GridCoverageImpl)gc1).getRenderedImage().getData();
-        Raster r2 = ((GridCoverageImpl)gc2).getRenderedImage().getData();
+        Raster r1 = ((GridCoverage2D)gc1).getRenderedImage().getData();
+        Raster r2 = ((GridCoverage2D)gc2).getRenderedImage().getData();
         for(int i=r1.getMinX(); i < r1.getWidth(); i++) {
             for(int j=r1.getMinY(); j<r1.getHeight(); j++) {
                 values1 = r1.getPixel(i,j, values1);
@@ -158,6 +168,7 @@
         }
     }
 
+
   public static final void main(String[] args) throws Exception {
       junit.textui.TestRunner.run(suite(ArcGridReadWriteTest.class));
   }
@@ -179,4 +190,4 @@
         this.compressed = compressed;
         this.grass = grass;
     }
-}
+}
\ No newline at end of file
Index: plugin/arcgrid/project.xml
===================================================================
--- plugin/arcgrid/project.xml	(revision 12514)
+++ plugin/arcgrid/project.xml	(working copy)
@@ -29,6 +29,15 @@
         <role>Java Developer</role>
       </roles>
     </developer>
+    <developer>
+      <name>Simone Giannecchini</name>
+      <id>simboss</id>
+      <email>simboss_ml@tiscali.it</email>
+      <organization></organization>
+      <roles>
+        <role>Java Developer</role>
+      </roles>
+    </developer>   
   </developers>
   <dependencies>
     <dependency>
@@ -79,4 +88,4 @@
       </resources>
     </unitTest>
   </build>
-</project>
+</project>
\ No newline at end of file
Index: plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridFormat.java
===================================================================
--- plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridFormat.java	(revision 12514)
+++ plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridFormat.java	(working copy)
@@ -33,11 +33,11 @@
 import org.geotools.data.coverage.grid.stream.IOExchange;
 import java.io.IOException;
 
-/**A simple implementation of the Arc Grid Format Metadata.
+/**A simple implementation of the Arc Grid Format.
  *
  *
  *  @author jeichar
- *  @author simbos  <a href="mailto:simboss_ml@tiscali.it">
+ *  @author <a href="mailto:simboss_ml@tiscali.it">Simone Giannecchini (simboss)</a>
  */
 public class ArcGridFormat
     extends AbstractGridFormat
@@ -228,4 +228,4 @@
     return writeParameters;
   }
 
-}
+}
\ No newline at end of file
Index: plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridWriter.java
===================================================================
--- plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridWriter.java	(revision 12514)
+++ plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridWriter.java	(working copy)
@@ -18,7 +18,12 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import org.opengis.referencing.operation.CoordinateOperationFactory;
+import org.opengis.referencing.crs.CoordinateReferenceSystem;
+import org.opengis.referencing.operation.MathTransform;
+import org.opengis.referencing.operation.CoordinateOperation;
 
+import org.geotools.referencing.FactoryFinder;
 import org.geotools.data.DataSourceException;
 import org.geotools.data.coverage.grid.stream.IOExchange;
 import org.geotools.feature.FeatureCollection;
@@ -32,7 +37,7 @@
 import org.opengis.parameter.InvalidParameterValueException;
 import org.opengis.parameter.ParameterValue;
 import org.opengis.parameter.ParameterValueGroup;
-import org.geotools.coverage.grid.GridCoverageImpl;
+import org.geotools.coverage.grid.GridCoverage2D;
 import org.geotools.geometry.GeneralEnvelope;
 import org.opengis.spatialschema.geometry.Envelope;
 import org.opengis.referencing.crs.CoordinateReferenceSystem;
@@ -41,6 +46,7 @@
 import java.net.URL;
 import java.io.BufferedWriter;
 import java.io.FileWriter;
+import org.opengis.spatialschema.geometry.DirectPosition;
 
 /**
  * ArcGridWriter Supports writing of an ArcGrid GridCoverage to an Desination
@@ -48,7 +54,7 @@
  * with the IOExchange
  *
  * @author jeichar
- * @author simboss
+ * @author <a href="mailto:simboss_ml@tiscali.it">Simone Giannecchini (simboss)</a>
  *
  */
 public class ArcGridWriter
@@ -172,29 +178,37 @@
    * @see ArcGridDataSource#setFeatures(FeatureCollection)
    */
   private void writeGridCoverage(GridCoverage gc) throws DataSourceException {
+    try {
+      //getting crs from gc
+      CoordinateReferenceSystem crs = gc.getCoordinateReferenceSystem();
+      ///////////////////////////////////////////////////////////////////////
+      //
+      // to be changed in the future
+      //
+      ///////////////////////////////////////////////////////////////////////
 
-    ///////////////////////////////////////////////////////////////////////
-    //
-    // to be changed in the future
-    //
-    ///////////////////////////////////////////////////////////////////////
-    java.awt.image.Raster data = ( (GridCoverageImpl) gc).getRenderedImage().
-        getData();
+      //getting the underlying raster
+      java.awt.image.Raster data = ( (GridCoverage2D) gc).getRenderedImage().
+          getData();
 
-    Envelope env = ( (GridCoverageImpl) gc).getEnvelope();
-    long height = data.getHeight();
-    long width = data.getWidth();
+      //getting the envelope
+      GeneralEnvelope env = (GeneralEnvelope) ( (GridCoverage2D) gc).
+          getEnvelope();
 
-    double xl = env.getLowerCorner().getOrdinate(0);
-    double yl = env.getLowerCorner().getOrdinate(1);
 
-    double cellsize = env.getUpperCorner().getOrdinate(0) -
-        env.getLowerCorner().getOrdinate(0);
-    cellsize = cellsize / width; //rivedi
+      long height = data.getHeight();
+      long width = data.getWidth();
 
-    try {
+      double xl = env.getLowerCorner().getOrdinate(0);
+      double yl = env.getLowerCorner().getOrdinate(1);
+
+      double cellsize = env.getUpperCorner().getOrdinate(0) -
+          env.getLowerCorner().getOrdinate(0);
+      cellsize = cellsize / width; //rivedi
+
+
       //writing crs info
-      writeCRSInfo(gc);
+      writeCRSInfo(crs);
 
       if (format.getWriteParameters().parameter("GRASS").booleanValue()) {
         arcGridRaster = new GRASSArcGridRaster(mWriter);
@@ -214,25 +228,25 @@
       ///////////////////////////////////////////////////////////////////////
       data = null;
     }
-    catch (java.io.IOException ioe) {
+    catch (Exception ioe) {
       throw new DataSourceException("IOError writing", ioe);
     }
   }
 
-  private void writeCRSInfo(GridCoverage gc) throws IOException {
+  private void writeCRSInfo(CoordinateReferenceSystem crs) throws IOException {
 
-    //getting crs from gc
-    CoordinateReferenceSystem crs = gc.getCoordinateReferenceSystem();
 
+
     //is it null?
     if (crs == null) {
 
       //default gcs wgs84
       crs = org.geotools.referencing.crs.GeographicCRS.WGS84;
 
-      //get the destination path
-      //getting the path of this object and the name
+
     }
+    //get the destination path
+    //getting the path of this object and the name
     File outProj = null;
     URL url=null;
     String pathname = null, name = null;
@@ -253,8 +267,11 @@
       pathname=url.getPath().substring(0,url.getPath().lastIndexOf("/")+1);
       name = url.getPath().substring(url.getPath().lastIndexOf("/")+1,url.getPath().length());
     }
+    else
+      //do nothing for the moment
+      return;
     //build up the name
-    name = pathname + 
+    name = pathname +
         (name.indexOf(".") > 0 ? name.substring(0, name.indexOf(".")) :
          name) +
         ".prj";
@@ -317,4 +334,4 @@
       mWriter.close();
     }
   }
-}
+}
\ No newline at end of file
Index: plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridFormatFactory.java
===================================================================
--- plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridFormatFactory.java	(revision 12514)
+++ plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridFormatFactory.java	(working copy)
@@ -24,6 +24,7 @@
  * Implementation of the GridCoverageFormat service provider interface for arc grid files.
  *
  * @author aaime
+ *
  */
 public class ArcGridFormatFactory
     implements GridFormatFactorySpi {
@@ -40,4 +41,4 @@
         return new ArcGridFormat();
     }
 
-}
+}
\ No newline at end of file
Index: plugin/arcgrid/src/org/geotools/gce/arcgrid/GRASSArcGridRaster.java
===================================================================
--- plugin/arcgrid/src/org/geotools/gce/arcgrid/GRASSArcGridRaster.java	(revision 12514)
+++ plugin/arcgrid/src/org/geotools/gce/arcgrid/GRASSArcGridRaster.java	(working copy)
@@ -32,6 +32,7 @@
  * outputs (a variation of the original format...)
  *
  * @author aaime
+ * @author <a href="mailto:simboss_ml@tiscali.it">Simone Giannecchini (simboss)</a>
  */
 public class GRASSArcGridRaster extends ArcGridRaster {
     /** Column number tag in the header file */
@@ -79,11 +80,11 @@
         st.resetSyntax();
         st.eolIsSignificant(true);
         st.whitespaceChars(0,' ');
-		st.whitespaceChars(':', ':');
+        st.whitespaceChars(':', ':');
         st.wordChars('a', 'z');
         st.wordChars('A', 'Z');
         st.wordChars('_', '_');
-		st.wordChars('*', '*');
+        st.wordChars('*', '*');
         st.parseNumbers();
 
         double north = 0;
@@ -96,8 +97,8 @@
             if (st.ttype == StreamTokenizer.TT_WORD) {
                 String key = st.sval;
 
-				if (NO_DATA_MARKER.equalsIgnoreCase(key))
-					break;
+                if (NO_DATA_MARKER.equalsIgnoreCase(key))
+                        break;
 
                 if (st.nextToken() != StreamTokenizer.TT_NUMBER) {
                     throw new IOException("Expected number after " + key);
@@ -340,4 +341,4 @@
         out.flush();
         out.close();
     }
-}
+}
\ No newline at end of file
Index: plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridRaster.java
===================================================================
--- plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridRaster.java	(revision 12514)
+++ plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridRaster.java	(working copy)
@@ -456,8 +456,8 @@
         out.print(NODATA_VALUE); spaces(out, 2); out.println(noData = -9999);
 
         // reset min and max
-        minValue = Double.MAX_VALUE;
-        maxValue = Double.MIN_VALUE;
+        minValue = Double.MIN_VALUE;
+        maxValue = Double.MAX_VALUE;
 
         // a buffer to flush each line to
         // this technique makes things a bit quicker because buffer.append()
@@ -551,4 +551,4 @@
         }
         return s;
     }
-}
+}
\ No newline at end of file
Index: plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridReader.java
===================================================================
--- plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridReader.java	(revision 12514)
+++ plugin/arcgrid/src/org/geotools/gce/arcgrid/ArcGridReader.java	(working copy)
@@ -16,51 +16,34 @@
  */
 package org.geotools.gce.arcgrid;
 
-import java.awt.Color;
-import java.io.IOException;
-import java.io.Reader;
-import java.util.NoSuchElementException;
+import java.io.*;
+import java.net.*;
+import java.util.*;
+import javax.media.jai.*;
 
-import org.geotools.coverage.grid.GridCoverageImpl;
-import org.geotools.data.DataSourceException;
-import org.geotools.data.coverage.grid.stream.IOExchange;
-import org.geotools.geometry.GeneralEnvelope;
-import org.geotools.parameter.Parameter;
-import org.geotools.parameter.ParameterGroup;
-import org.geotools.referencing.crs.GeographicCRS;
-import org.opengis.coverage.MetadataNameNotFoundException;
-import org.opengis.coverage.grid.Format;
-import org.opengis.coverage.grid.GridCoverage;
-import org.opengis.coverage.grid.GridCoverageReader;
-import org.opengis.parameter.GeneralParameterValue;
-import org.opengis.parameter.InvalidParameterNameException;
-import org.opengis.parameter.InvalidParameterValueException;
-import org.opengis.referencing.FactoryException;
-import org.opengis.referencing.crs.CoordinateReferenceSystem;
-import org.opengis.referencing.operation.OperationNotFoundException;
+import java.awt.*;
+import java.awt.color.*;
+import java.awt.image.*;
 
-import com.vividsolutions.jts.geom.Envelope;
-import java.io.File;
-import java.net.URL;
-import org.opengis.parameter.ParameterValueGroup;
-import org.geotools.data.coverage.grid.UnknownFormat;
-import java.awt.image.BufferedImage;
-import java.awt.image.ColorModel;
-import javax.media.jai.RasterFactory;
-import java.awt.Transparency;
-import java.awt.color.ColorSpace;
-import java.awt.image.DataBuffer;
-import java.awt.color.ICC_Profile;
-import java.awt.color.ICC_ColorSpace;
-import java.io.BufferedReader;
-import java.io.FileReader;
+import org.geotools.coverage.grid.*;
+import org.geotools.data.*;
+import org.geotools.data.coverage.grid.stream.*;
+import org.geotools.geometry.*;
+import org.geotools.parameter.*;
 import org.geotools.referencing.wkt.Parser;
+import org.opengis.coverage.*;
+import org.opengis.coverage.grid.*;
+import org.opengis.coverage.grid.GridCoverage;
+import org.opengis.parameter.*;
+import org.opengis.referencing.crs.*;
+import com.vividsolutions.jts.geom.*;
 
 /**
  * This class can read an arc grid data source and create a grid coverage from
  * the data.
  *
  * @author jeichar
+ * @author <a href="mailto:simboss_ml@tiscali.it">Simone Giannecchini (simboss)</a>
  */
 public class ArcGridReader  implements GridCoverageReader {
   /**Source object to read from.*/
@@ -89,7 +72,7 @@
   private ArcGridRaster arcGridRaster = null;
 
   /** A name for the grid coverage. */
-  private String name;
+  private String name="ArcGrid";
 
   /**Creates a new instance of an ArcGridReader.
    *
@@ -262,7 +245,7 @@
   public GridCoverage read(GeneralParameterValue[] params) throws
       IllegalArgumentException, IOException {
     if(params!=null)
-      setEnvironment("ArcGrid", params);
+    	setEnvironment( params);
 
     return getGridCoverage();
   }
@@ -299,10 +282,9 @@
    * @throws IOException
    *             Thrown for any other unexpected exception
    */
-  private void setEnvironment(String name, GeneralParameterValue[] params) throws
+  private void setEnvironment( GeneralParameterValue[] params) throws
       InvalidParameterNameException,
       InvalidParameterValueException, IOException {
-    this.name = name;
 
     for (int i = 0; i < params.length; i++) {
       Parameter param = (Parameter) params[i];
@@ -373,11 +355,15 @@
 
   private GridCoverage createCoverage() throws java.io.IOException {
     java.awt.image.WritableRaster raster = null;
+
+    //  reading the raster of data from the specified source
     raster = openArcGridRaster().readRaster();
 
+    //  getting the coordinate reference system
     CoordinateReferenceSystem coordinateSystem = getCoordinateSystem();
 
-    org.opengis.spatialschema.geometry.Envelope envelope = new GeneralEnvelope(
+    //  building up the envelope
+        GeneralEnvelope envelope = new GeneralEnvelope(
         new double[] {this.arcGridRaster.getXlCorner(),
         this.arcGridRaster.getYlCorner()}
         ,
@@ -385,6 +371,8 @@
         this.arcGridRaster.getNCols() * this.arcGridRaster.getCellSize(),
         this.arcGridRaster.getYlCorner() +
         this.arcGridRaster.getNRows() * this.arcGridRaster.getCellSize()});
+        
+        envelope.setCoordinateReferenceSystem(coordinateSystem);
 
     try {
       //////////////////////////////////////////////////////////////////////////////////////////////////
@@ -398,12 +386,10 @@
           false,
           false,//ignored since
           Transparency.OPAQUE);
-      return new GridCoverageImpl(name,
+      return new GridCoverage2D(name,
+            new BufferedImage(cm,raster,false,null),
                                   coordinateSystem,
-                                  null,
-                                  null,
-                                  new BufferedImage(cm,raster,false,null),
-                                  envelope);
+            envelope);
       //////////////////////////////////////////////////////////////////////////////////////////////////
       //
       //TODO this is not finished
@@ -411,18 +397,10 @@
       //////////////////////////////////////////////////////////////////////////////////////////////////
 
     }
-    catch (OperationNotFoundException e) {
-      // TODO Auto-generated catch block
-      e.printStackTrace();
-    }
     catch (NoSuchElementException e) {
       // TODO Auto-generated catch block
       e.printStackTrace();
     }
-    catch (FactoryException e) {
-      // TODO Auto-generated catch block
-      e.printStackTrace();
-    }
     return null;
   }
 
@@ -456,7 +434,8 @@
 	      url = (URL)this.mSource;
               pathname=url.getPath().substring(0,url.getPath().lastIndexOf("/")+1);
 	      name = url.getPath().substring(url.getPath().lastIndexOf("/")+1,url.getPath().length());
-	    }
+	    }else
+	    	throw new Exception("fake exception");
 	    //build up the name
 	    name = pathname +
 	        (name.lastIndexOf(".") > 0 ? name.substring(0, name.indexOf(".")) :
@@ -480,12 +459,12 @@
 		this.coordinateSystem= null;
 	}
 
-    //is it null the we gor for wgs84?
+	//	is it null? Then we gor for wgs84
     if(this.coordinateSystem==null)
       this.coordinateSystem= org.geotools.referencing.crs.GeographicCRS.WGS84;
 
 
-	return this.coordinateSystem;
+    return this.coordinateSystem;
 
   }
 
@@ -555,4 +534,4 @@
     // TODO Auto-generated method stub
 
   }
-}
+}
\ No newline at end of file
