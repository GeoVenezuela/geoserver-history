<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
  <title>Build Documentation</title>

  <sect1>
    <title>Welcome</title>

    <para>The GeoServer project is a Java implementation of the 1.0 Web
    Feature Server specification from the <ulink
    url="http://www.opengis.org">OpenGIS</ulink> Consortium. GeoServer aspires
    to be the '<ulink url="http://www.apache.org">Apache</ulink>' of OpenGIS
    data serving and its mission is to enable greater geographic
    interoperability by reiforcing OpenGIS standards and lowering the barriers
    to entry for geographic data providers. Developers should keep in mind the
    four primary goals of GeoServer, listed in order of importance:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Standards Compliance</emphasis>: The
        primary intent of the GeoServer project is to promote standardization
        and it must, therefore, adhere to published standards as closely as
        possible. GeoServer also attempts to support as many relevant
        geographic standards as possible.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Data Format Support</emphasis>: In order
        to make GeoServer a useful product, it must help translate the current
        cacaphony of geogaphic data formats into a single format. Therefore,
        supporting several data formats - both relational and flat files - is
        of primary importance to the project.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Ease of Use</emphasis>: GeoServer is
        targeted at organizations with minimal technical expertise and must,
        therefore, be easy to install, configure, and run for organizations
        with few technical resources.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Efficiency</emphasis>: Given that the
        volume of data required by geographic applications generally entails
        severe computational and bandwidth loads, GeoServer strives to be as
        efficient as possible, while achieving other goals.</para>
      </listitem>
    </itemizedlist>

    <para>GeoServer is implemented using Java2 Enterprise Edition (J2EE)
    standards, including Java Servlets and Java Server Pages. Therefore, in
    order to install and use GeoServer, you need to first install a servlet
    container, such as <ulink
    url="http://jakarta.apache.org/tomcat/">Tomcat</ulink> or <ulink
    url="http://www.caucho.com/">Resin</ulink>. This requirement is explained
    further in the Testing section. GeoServer also makes use of several free,
    open source libraries and tools such as <ulink
    url="http://jakarta.apache.org/ant/">Ant</ulink>, and <ulink
    url="http://xml.apache.org/xerces-j/">Xerces</ulink>. The function of
    these libraries within GeoServer is explained further in the Libraries
    section. Although the development team has plans to expand database
    support, GeoServer uses PostGIS as its primary source for storage of
    geographic data. PostGIS is an extension of the popular open source
    Postgres database system and is detailed in the Data section. To get
    started working with the GeoServer code, you should consult the Download
    section and the read about Building.</para>

    <para>GeoServer has an active developer community that you can engage by
    joining the GeoServer mailing list and asking questions or making
    suggestions. If you create a user account at this site, you may
    participate in forums and vote in polls as well. However, first, you must
    download the GeoServer source; go to our download page. You may download
    our latest stable release, or else download directly with cvs.</para>

    <para>Note: This document is falling out of date, and we don't have time
    to update for 1.2.0-rc2. We will get a revised version in time for 1.2.0.
    Until then if there are questions just query the email list</para>
  </sect1>

  <sect1>
    <title>Building</title>

    <para>Most of this documentation assumes that you are building GeoServer
    on a Unix system and that you have Unix command line utilities availible
    to you. All of the examples given below are Unix command line prompts. As
    GeoServer is built in Java using a platform-neutral build tool, there is
    nothing to prevent you from developing and testing GeoServer on Windows.
    In fact, we encourage you to do so and send us documentation! However, we
    have not done so, so keep this bias in mind as you are reading the
    documentation that follows.</para>

    <para>GeoServer is built against the <ulink
    url="http://java.sun.com/j2se/">JDK1.4.1</ulink>. If you do not have the
    JDK1.4.1 installed on your machine, you should download it from Sun and
    put it in your JAVA_HOME path.</para>

    <para>GeoServer is built using <ulink
    url="http://jakarta.apache.org/ant/">Ant</ulink>. If you are not yet
    familiar with the magical and wonderful Ant build tool, you should first
    visit their site, download and install Ant. You do not need to know much
    about Ant in order to work with GeoServer: most useful build and testing
    targets are included with the distribution. If you go to the root
    GeoServer directory and type:</para>

    <programlisting>ant</programlisting>

    <para>You will be given a list of all build targets availible, as well as
    a description of what they do. If you would like to see the the Ant build
    file, just open up 'build.xml' in the root directory. To execute any of
    the build targets from the root GeoServer directory, you simply need to
    type:</para>

    <programlisting>ant <emphasis>target</emphasis></programlisting>

    <para>Where target is the name of the target that you want to build. Since
    all necessary libraries are included in the GeoServer directory, you
    should now be able to build any needed target. Don't worry about classpath
    issues: Ant takes care of them for you.</para>
  </sect1>

  <sect1>
    <title>Setting up your Data Environment</title>

    <para>Although it is a primary goal of the GeoServer project to support
    several data storage formats, good support exists now only for PostGIS, an
    excellent extension of the venerable Postgresql relational database.
    <ulink url="http://postgis.refractions.net/">PostGIS</ulink> and <ulink
    url="http://www.postgresql.org/">Postgresql</ulink> are open source
    databases that are free to all users. Postgresql was developed at Berkeley
    several years ago and PostGIS is a recent extension developed by the
    clever programmers at <ulink url="http://www.refractions.net/">Refractions
    Research</ulink>. Installing Postgresql and PostGIS is the most
    complicated part of setting up a GeoServer site and for this reason, we
    will supplement the documentation to do so a little here.</para>

    <para>First, you should download the full source of Postgresql. Binaries,
    RPMs, and other packaged builds will generally not suffice because you
    will need to compile the PostGIS extension and JDBC bindings into
    Postgresql in order for it to correctly speak with GeoServer.</para>

    <para>First, download Postgresql - we have had the best luck with version
    7.1.2. You should configure and install it, per the installation
    instructions. It should go something like this:</para>

    <programlisting>./configure --with-java
make
make install</programlisting>

    <para>Make sure that you configure it with Java. Then, download PostGIS.
    You should place PostGIS in your Postgresql 'contrib' directory and follow
    the directions for installation in the postgis dir.</para>

    <para>You should, of course, check to make sure that Postgresql and
    PostGIS are functioning correctly before you attempt to connect with then
    using GeoServer. You may use the command line psql tool to do this.</para>
  </sect1>

  <sect1>
    <title>Directory Structure</title>

    <para>The directory structure of GeoServer is relatively simple; note that
    as a general rule, descriptive and long names are favored over
    abbreviations, with a few exceptions. Directory and most file names here
    generally follow the same naming conventions as Java methods: lowercase
    start, uppercase for new words, no spaces. At the root directory, the lie
    of the land looks something like this:</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <tbody>
          <row>
            <entry>bin</entry>

            <entry>This is used to store some platform dependant scripts for
            testing.</entry>
          </row>

          <row>
            <entry>build.xml</entry>

            <entry>This is the Ant build file, referenced in the Building
            section.</entry>
          </row>

          <row>
            <entry>build</entry>

            <entry>This section contains all the .CLASS files and is an exact
            mirror of the source directory.</entry>
          </row>

          <row>
            <entry>capabilities</entry>

            <entry>This section contains all the non-proprietary schemas
            required to run GeoServer.</entry>
          </row>

          <row>
            <entry>cite</entry>

            <entry>This section contains information for performing CITE
            tests, including bundled configurations.</entry>
          </row>

          <row>
            <entry>conf</entry>

            <entry>This is where the files to configure GeoServer are
            contained.</entry>
          </row>

          <row>
            <entry>documents</entry>

            <entry>This section contains the documentation.</entry>
          </row>

          <row>
            <entry>lib</entry>

            <entry>This section contains all the libraries used by GeoServer
            and is discussed in the Libraries section.</entry>
          </row>

          <row>
            <entry>release</entry>

            <entry>This section contains the generated release files.</entry>
          </row>

          <row>
            <entry>server</entry>

            <entry>This section contains the build-in test server
            configuration. Does not work at present.</entry>
          </row>

          <row>
            <entry>src</entry>

            <entry>This section contains all of the .java files and is an
            exact mirror of the classes directory.</entry>
          </row>

          <row>
            <entry>test</entry>

            <entry>This section contains all the .java testing files.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1>
    <title>Geoserver Libraries</title>

    <para>GeoServer is built on top of several excellent open source software
    libraries. We greatly appreciate and thank the authors for their hard work
    and dedication. Without their efforts, GeoServer would not exist. Here are
    the libraries, with brief descriptions of how they fit into
    GeoServer.</para>

    <informaltable>
      <tgroup cols="3">
        <colspec align="left" colwidth="100" />

        <colspec align="left" colwidth="100" />

        <tbody>
          <row>
            <entry><ulink
            url="http://geoserver.sourceforge.net/">GeoServer</ulink> (<ulink
            url="http://www.vfny.org/">VFNY</ulink>)</entry>

            <entry>geoserver.jar</entry>

            <entry>This is the GeoServer .JAR file, which contains all classes
            except the servlets themselves.</entry>
          </row>

          <row>
            <entry><ulink url="http://jdbc.postgresql.org/">JDBC</ulink>
            (<ulink url="http://www.postgresql.org/">Postgres</ulink>)</entry>

            <entry>jdbcPostgres.jar</entry>

            <entry>This is the Postgres JDBC driver, used primarily in the
            GetFeature interface.</entry>
          </row>

          <row>
            <entry><ulink
            url="http://www.vividsolutions.com/jtc/main.html">JTS</ulink>
            (<ulink url="http://www.vividsolutions.com">Vivid</ulink>)</entry>

            <entry>jTS-1.3.jar</entry>

            <entry>The Java Topology Suite, which is used as base types for
            all geometries, as well as for filtering.</entry>
          </row>

          <row>
            <entry><ulink
            url="http://java.sun.com/products/servlet/index.html">Servlet</ulink>
            (<ulink url="http://java.sun.com/">Sun</ulink>)</entry>

            <entry>servlet.jar</entry>

            <entry>This is the Servlet reference library, used for compilation
            checking during testing.</entry>
          </row>

          <row>
            <entry><ulink
            url="http://jakarta.apache.org/struts/index.html">Struts</ulink>
            (<ulink url="http://jakarta.apache.org/">Jakarta</ulink>)</entry>

            <entry>struts.jar</entry>

            <entry>The struts project implements an MVC design pattern that
            helps with the administrative interface.</entry>
          </row>

          <row>
            <entry><ulink
            url="http://xml.apache.org/xerces2-j/index.html">Xerces</ulink>
            (<ulink url="http://www.apache.org/">Apache</ulink>)</entry>

            <entry>xerces.jar</entry>

            <entry>Xerces handles all of the SAX parsing for the request
            interfaces.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1>
    <title>Setting up the Test Environment</title>

    <para>Several good open source, free servlet containers and a bevy of
    commercial ones exist on the market. We recommend <ulink
    url="http://www.caucho.com/">Resin</ulink> (open source, free to
    non-commercial users) or <ulink
    url="http://jakarta.apache.org/tomcat/index.html">Tomcat</ulink> (open
    source, free). Most GeoServer testing has occured on Tomcat, which is
    remarkably simple to set up and administer. We reccomend using the
    stand-alone server installation over the integrated Apache install. Given
    the maturity of these projects, we will say nothing further about
    installation.</para>

    <para>Once you have successfully installed a servlet container, you are
    ready to test GeoServer. If you have correctly configured your build file,
    from the GeoServer root directory you can type:</para>

    <programlisting>ant test-ext</programlisting>

    <para>Which will build a .WAR file and place it in the application
    directory of your servlet container. A .WAR file is a Web Application
    Archive file, which is essentially a .JAR file with extra information for
    a servlet container. After you run warTest, your servlet container should
    auto-expand it and run your servlets correctly. The easiest way to test
    this is to browse the application URL, followed by GetCapabilities and see
    if it returns a GetCapabilities XML document. For example, from a browser
    on your server, if you were using port 81 you would type:</para>

    <programlisting><ulink
        url="http://localhost:81/geoserver/wfs/GetCapabilities">http://localhost:81/geoserver/wfs/GetCapabilities</ulink></programlisting>

    <para>Now, you should enter some data into your PostGIS database and
    configure GeoServer to serve it. There are two configuration steps to do
    this. First, you should go to your root web application directory and edit
    the following file: data/configuration.xml. You should change the
    database, username, password, and database port to your PostGIS
    database.</para>

    <para>Next, you should go to your root web application directory and
    navigate to the following file: data/featureTypes/. For every table in
    your PostGIS database, you should create a directory which matches the
    table name exactly. This directory should contain two files: info.xml and
    schema.xml. The schema.xml document is the feature type schema and its
    structure is defined in the WFS specification. The info.xml file is used
    by GeoServer and its fields are identical to those returned per feature
    type by the GetCapabilities document defined by the WFS specification. The
    SRS is currently the most important field and its value should correspond
    to an approved <ulink url="http://www.epsg.org/">EPSG</ulink> code. The
    'rail' directory is included as an example, but should be deleted before
    you do any testing (unless you also have a table called 'rail').</para>

    <para>That is it! You should now be ready to build and test
    GeoServer.</para>
  </sect1>

  <sect1>
    <title>Plug-in DataSources</title>

    <para>Geoserver 0.96 introduces new support for plug-in datasources.
    Shapefiles are the first instance of the new plug-in style, but the work
    done for them will make new geotools datasource much easier to add to
    geoserver. If you find a datasource in geotools that you would like to try
    out with geoserver then it can be used with hopefully a fairly minimal
    amount of tweaking. If implemented exactly right then the jar should be
    able to be added directly to the lib directory of geoserver. The geotools
    datasource must implement the DataSourceFactorySpi interface for the
    plugin jar to work, and the jar must include a META-INF entry for the
    factory implementing class. If everything is correct on the datasource
    side then the only thing to be done is to edit the info.xml file for the
    correct DatasourceParams, which are the params that the
    DataSourceFactorySpi will look for. If there are developers interested in
    new datasources for geoserver, please don't hesitate to contact us, we've
    been working to make the process relatively painless, with plug-in
    mechanisms and a new AbstractDataSource in geotools to handle much of the
    messy work</para>
  </sect1>
</article>