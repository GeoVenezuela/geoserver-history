<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- ====================================================================== -->
<!-- GeoServer BUILD FILE                                                   -->
<!-- Copyright TOPP 2002                                                    -->
<!-- This build file is licensed under the GPL v2.0                         -->
<!-- You do not need to modify any values for this build file to work.      -->
<!-- For convenience, you may modify the 'external directories' variables   -->
<!-- under the PROPERTIES section.                                          -->
<!-- ====================================================================== -->

<project name="geoserver" default="help" basedir=".">
<!-- ====================================================================== -->
<!-- PROPERTIES                                                             -->
<!-- ====================================================================== -->

  <!-- release version -->
  <property name="name.release" value="1.2-beta1"/>

  <!-- primary directories -->
  <property name="dir.bin" value="${basedir}/bin"/>
  <property name="dir.build" value="${basedir}/build"/>
  <property name="dir.doc" value="${basedir}/documents"/>
  <property name="dir.lib" value="${basedir}/lib"/>
  <property name="dir.server" value="${basedir}/server"/>
  <property name="dir.src" value="${basedir}/src"/>
  <property name="dir.test" value="${basedir}/test"/>
  <property name="dir.conf" value="${basedir}/conf"/>
  <property name="dir.release" value="${basedir}/release"/>
  <property name="dir.webinf" value="${basedir}/WEB-INF"/>

  <!-- secondary directories -->
  <property name="dir.data" value="${dir.conf}"/>
  <property name="dir.testsJar" 
  value="${dir.server}/webapps/ROOT/WEB-INF/lib"/>
  <property name="dir.testApp" value="${dir.server}/webapps/ROOT/WEB-INF"/>
  <property name="dir.catalina" value="${dir.lib}/catalina"/>

  <!-- external directories -->
  <!-- pc example -->
  <property name="dir.container" value="C:\resin-3.0.6\webapps"/>
  <property name="dir.geotools" 
            value="e:\workspace\geotools2\geotools-src"/>
            
  <!-- linux example
  <property name="dir.container" value="/usr/local/resin-2.1.4/webapps"/>
  <property name="dir.geotools" 
            value="/home/rob/wfs/geotools/geotools2/geotools-src"/>
   -->
  <!-- jars -->
  <property name="jar.geotools" value="${dir.lib}/geotools.jar"/>
  <property name="jar.geoserver" value="${dir.lib}/geoserver.jar"/>
  <property name="jar.log" value="${dir.lib}/log4j-1.2.5.jar"/>
  <property name="jar.servlet" value="${dir.lib}/servlet.jar"/>
  <property name="jar.xerces" value="${dir.lib}/xerces.jar"/>
  <property name="jar.jdbcPostgres" value="${dir.lib}/jdbcPostgres.jar"/>
  <property name="jar.castor" value="${dir.lib}/castor.jar"/>
  <property name="jar.jts" value="${dir.lib}/jts-1.0.0.jar"/>
  <property name="jar.lucene" value="${dir.lib}/lucene.jar"/>
  <property name="jar.xalan" value="${dir.lib}/xalan.jar"/>
  <property name="jar.a2j" value="${dir.lib}/a2jruntime.jar"/>
  <property name="jar.z3950" value="${dir.lib}/ki-jzkit-z3950.jar"/>
  <property name="jar.ki-util" value="${dir.lib}/ki-util.jar"/>
  
  <property name="test.name" value="config.ConfigSuite"/>
  <!--<property name="test.type" value="CitePostGis"/>-->
  <!--<property name="test.type" value="CiteShapeFiles"/>-->

  <!-- paths -->
  <path id="path.lib">
    <fileset dir="${dir.lib}">
      <include name="*.jar"/>
      <exclude name="geoserver.jar"/>
    </fileset>
  </path>
  <path id="path.catalina">
    <fileset dir="${dir.catalina}" includes="embedded.jar"/>
    <fileset dir="${dir.catalina}/bin" includes="bootstrap.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="catalina.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="servlets-cgi.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="servlets-common.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="servlets-default.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="servlets-invoker.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="servlets-manager.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="servlets-snoop.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="servlets-ssi.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="servlets.webdav.jar"/>
    <fileset dir="${dir.catalina}/server/lib" 
             includes="jakarta-regexp-1.2.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="tomcat-ajp.jar"/>
    <fileset dir="${dir.catalina}/server/lib" includes="tomcat-util.jar"/>
    <fileset dir="${dir.catalina}/lib" includes="naming-factory.jar"/>
    <fileset dir="${dir.catalina}/common/lib" includes="crimson.jar"/>
    <fileset dir="${dir.catalina}/common/lib" includes="jasper-compiler.jar"/>
    <fileset dir="${dir.catalina}/common/lib" includes="jasper-runtime.jar"/>
    <fileset dir="${dir.catalina}/common/lib" includes="jaxp.jar"/>
    <fileset dir="${dir.catalina}/common/lib" includes="jndi.jar"/>
    <fileset dir="${dir.catalina}/common/lib" includes="naming-common.jar"/>
    <fileset dir="${dir.catalina}/common/lib" includes="naming-resources.jar"/>
    <fileset dir="${dir.catalina}/common/lib" includes="servlet.jar"/>
    <fileset dir="${dir.catalina}/common/lib" includes="tools.jar"/>
    <fileset dir="${dir.catalina}/common/lib" includes="log4j.jar"/>
  </path>
  <path id="path.build">
    <path refid="path.lib"/>
    <path refid="path.catalina"/>
    <fileset dir="${dir.build}">
      <include name="**"/>
    </fileset>
    <fileset dir="${dir.build}">
      <include name="org/vfny/geoserver/requests/GetCapabilitiesSuite.class"/>
    </fileset>
  </path>

<!-- ====================================================================== -->
<!-- HELP / INDEX OF TARGETS                                                -->
<!-- ====================================================================== -->
  <target name="help">
    <echo message="GeoServer Build File..."/>
    <echo message=""/>
    <echo message=" COMPILATION TARGETS"/>
    <echo message="    init:         initializes build process"/>
    <echo message="    all:          compiles all packages"/>
    <echo message="    clean:        removes, re-compiles all packages"/>
    <echo message=""/>
    <echo message=" TEST TARGETS"/>
    <echo message="    unit:         compiles, runs unit 1 test"/>
    <echo message="                    -param: test.name=[package.class]"/>
    <echo message="    unit-all:     compiles and runs all unit tests"/>
    <echo message="    test-start:   builds and runs the built-in server"/>
    <echo message="    test-stop:   stops the built-in server"/>
    <echo message="    test-clean:   builds clean to built-in server"/>
    <echo message="    test-ext:     builds war to external server"/>
    <echo message="                    -param: dir.container=[server_path]"/>
    <echo message="                    -param: test.type=CitePostGis"/>
    <echo message=""/>
    <echo message=" BUILD TARGETS"/>
    <echo message="    war:          builds geoserver war file"/>
    <echo message="    document:     generates all javadocs for project"/>
    <echo message="    clean:        rebuilds all classes"/>
    <echo message="    release-all:      makes a full release build"/>
    <echo message="                    -param: name.release=[release]"/>
    <echo message="    release-binary:   makes a full release build"/>
    <echo message="    release-src:      makes a full release build"/>
    <echo message=""/>
    <echo message=" ADMIN TARGETS"/>
    <echo message="    help | ?:     displays this message"/>
    <echo message="    geotools:     builds, deploys the geotools jar"/>
    <echo message="                    -param: dir.geotools=[geotools_path]"/>
    <echo message=""/>
    <echo message=" Examples..."/>
    <echo message="    ant test-ext -Ddir.container=/usr/local/resin-3.0.4/webapps"/>
    <echo message="    ant unit -Dtest.name=requests.DeleteSuite"/>
    <echo message="    ant all"/>
  </target>

<!-- ====================================================================== -->
<!-- COMPILATION TARGETS                                                    -->
<!-- ====================================================================== -->
<!-- INITIALIZE
      checks to make sure that directory structure is in place, etc.  -->
  <target name="init">
    <mkdir dir="${dir.build}"/>
    <mkdir dir="${dir.server}"/>
    <tstamp><format property="date.current" pattern="MM.dd.yyyy"/></tstamp>
  </target>

<!-- ALL
      builds all of the files in the project, no clean -->
  <target name="all" depends="init">
    <javac srcdir="${dir.src}" 
           destdir="${dir.build}" 
           includes="**" 
           classpathref="path.build"
           deprecation="off"
           debug="on"/>
    <copy todir="${dir.build}">
      <fileset dir="${dir.src}">
        <include name="**/*.properties"/>
      </fileset>
    </copy>
    <jar jarfile="${dir.lib}/geoserver.jar">
      <fileset dir="${dir.build}">
        <exclude name="**/servlets/*" />
        <exclude name="**/EmbeddedTomcat.class" />
      </fileset>
    </jar>
  </target>

<!-- CLEAN -->
  <target name="clean" depends="init">
    <delete includeEmptyDirs="false" >
      <fileset dir="${dir.build}" />
    </delete>
    <delete file="${dir.lib}/geoserver.jar" failonerror="true"/>
    <antcall target="all"/>
  </target>

<!-- ====================================================================== -->
<!-- TEST TARGETS                                                           -->
<!-- ====================================================================== -->

<!-- UNIT -->
 <target name="unit" depends="init, all">
    <javac srcdir="${dir.test}" 
           destdir="${dir.build}" 
           includes="**/*.java" 
           classpathref="path.build" 
           deprecation="off"
           debug="on"/>
    <antcall target="all"/>
    <junit fork="false"
           printsummary="on">
      <formatter type="plain" usefile="false"/>
      <sysproperty key="dataFolder" value="${basedir}/tests/unit/testData"/>

      <classpath>
        <fileset dir="${dir.lib}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
     
       <test fork="true" 
            name="org.vfny.geoserver.${test.name}"/>
    </junit>
  </target>

   <target name="unit-all" depends="unit-requests, unit-zserver">
    <junit fork="false"
           printsummary="on">
      <formatter type="plain" usefile="false"/>
      <sysproperty key="dataFolder" value="${basedir}/tests/unit/testData"/>

      <classpath>
    <path refid="path.test"/>
        <fileset dir="${dir.lib}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </junit>
  </target>    

  <target name="unit-requests" depends="init, all">
    <javac srcdir="${dir.test}" 
           destdir="${dir.build}" 
           includes="**/*.java" 
           classpathref="path.build" 
           deprecation="on"
              debug="on"/>
    <antcall target="all"/>
    <junit fork="false"
           printsummary="on">
      <formatter type="plain" usefile="false"/>
      <sysproperty key="dataFolder" value="${basedir}/tests/unit/testData"/>

      <classpath>
        <fileset dir="${dir.lib}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <test fork="true" 
            name="org.vfny.geoserver.requests.CapabilitiesSuite"/>
      <test fork="true" 
            name="org.vfny.geoserver.requests.DescribeSuite"/>
  <test fork="true" 
            name="org.vfny.geoserver.requests.TransactionSuite"/>
<test fork="true" 
            name="org.vfny.geoserver.requests.LockSuite"/>
<test fork="true" 
            name="org.vfny.geoserver.requests.FeatureSuite"/>
    </junit>
  </target>

  <target name="unit-zserver" depends="init, all">
    <javac srcdir="${dir.test}" 
           destdir="${dir.build}" 
           includes="**/*.java" 
           classpathref="path.build" 
           deprecation="on"
              debug="on"/>
    <antcall target="all"/>
    <junit fork="false"
           printsummary="on">
      <formatter type="plain" usefile="false"/>
      <sysproperty key="dataFolder" value="${basedir}/tests/unit/testData"/>

      <classpath>
        <fileset dir="${dir.lib}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
      <test fork="true" 
            name="org.vfny.geoserver.zserver.ApplyXPathSuite"/>
      <test fork="true" 
            name="org.vfny.geoserver.zserver.GeoIndexerSuite"/>
  <test fork="true" 
            name="org.vfny.geoserver.zserver.GeoProfileSuite"/>
<test fork="true" 
            name="org.vfny.geoserver.zserver.GeoSearchSuite"/>
<test fork="true" 
            name="org.vfny.geoserver.zserver.GeoSummarySuite"/>
<test fork="true" 
            name="org.vfny.geoserver.zserver.NumericFieldSuite"/>
<test fork="true" 
            name="org.vfny.geoserver.zserver.RPNConverterSuite"/>
<test fork="true" 
            name="org.vfny.geoserver.zserver.XMLDocumentSuite"/>
    </junit>
  </target>

<!-- TEST -->
<!-- deploys application to test server -->
  <target name="test-start" depends="init, all">
    <mkdir dir="${dir.server}/webapps/ROOT"/>

    <!-- This will now build with the users directory, which I think is
         appropriate for testing of this sort, as you'll want to configure
         in the conf directory, since whenever you start with this it blows
         away changes the ui might have done. -->
    <antcall target="war">
      <!--param name="conf.path" value="${basedir}/cite/confCite${test.type}.zip"/-->
    </antcall>
    
    <unwar src="${basedir}/geoserver.war" dest="${dir.server}/webapps/ROOT/"/>

    <path id="path.test">
      <path refid="path.catalina"/>
      <fileset dir="${dir.server}/webapps/ROOT/WEB-INF/lib">
        <include name="*.jar"/>
      </fileset>
	</path>
    <!-- stops a running server -->
    <java classname="org.vfny.geoserver.EmbeddedTomcat" 
          classpathref="path.test" 
          fork="true">
      <arg value="stop"/>
      <!--<jvmarg value="-DGEOSERVER_HOME=${basedir}"/>
      <jvmarg value="-DCATALINA_HOME=${basedir}/libraries/catalina"/>-->
    </java>
    <!-- remove the classes forcing the server to build new class,
         so changes to the code actually are reflected in test server. -->
     <delete  failonerror="false">
       <fileset dir="${dir.testApp}/classes/org"> 
         <exclude name="**/servlets/*"/>
       </fileset>
    </delete>
    <!-- builds servlets to test server -->
    
    <javac srcdir="${dir.src}" 
           destdir="${dir.testApp}/classes/" 
           includes="**/servlets/*.java" 
           classpathref="path.build"
              debug="on"/>
    <!-- builds embedded jar -->
    <jar jarfile="${dir.testApp}/lib/embedded.jar">
      <fileset dir="${dir.build}">
        <exclude name="**/org/*" />
        <include name="**/EmbeddedTomcat.class" />
      </fileset>
    </jar>
    <!-- builds geoserver jar to test server -->
    <jar jarfile="${dir.testApp}/lib/geoserver.jar">
      <fileset dir="${dir.build}">
        <exclude name="**/servlets/*" />
        <exclude name="**/EmbeddedTomcat.class" />
      </fileset>
    </jar>
    <!-- starts the test server -->
    <java classname="org.vfny.geoserver.EmbeddedTomcat" 
          classpathref="path.test" 
          fork="true">
      <arg value="start"/>
      <!--<jvmarg value="-DGEOSERVER_HOME=${basedir}"/>
      <jvmarg value="-DCATALINA_HOME=${basedir}/libraries/catalina"/>-->
    </java>
  </target>

<!-- STOP SERVER -->
<!-- deploys application to test server -->
  <target name="test-stop" depends="init">
    <!-- stops a running server -->
    <java classname="org.vfny.geoserver.EmbeddedTomcat" 
          classpathref="path.build" 
          fork="true">
      <arg value="stop"/>
      <jvmarg value="-DGEOSERVER_HOME=${basedir}"/>
      <jvmarg value="-DCATALINA_HOME=${basedir}/libraries/catalina"/>
    </java>
  </target>

<!-- TEST CLEAN -->
<!-- deploys application to test server -->
  <target name="test-clean" depends="init, all">
    <delete dir="${basedir}/server/webapps/ROOT/WEB-INF/classes/org" 
            failonerror="false"/>
    <copy todir="${basedir}/server/webapps/ROOT/WEB-INF/classes" >
      <fileset dir="${dir.build}">
        <include name="**/servlets/**.class"/>
      </fileset>
    </copy>
  </target>

<!-- EXTERNAL TEST -->
<!-- deploys application to test server -->
  <target name="test-ext" depends="init, war">

  
    <!-- copy to test server -->
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dir.container}/geoserver"/>
    </delete>
    <delete file="${dir.container}/geoserver.war"  failonerror="false"/>
    <delete file="${dir.container}/../logs/stdout.log" failonerror="false"/>
    <delete file="${dir.container}/../logs/stderr.log" failonerror="false"/>
    <delete file="${dir.container}/../logs/*.log.*" failonerror="false"/>
    <copy todir="${dir.container}/" flatten="yes">
      <fileset dir="${basedir}">
        <include name="geoserver.war"/>
      </fileset>
    </copy>
  </target>
  
  <target name="misc_conf" depends="init" if="test.type">
    <antcall target="build-war">
      <param name="conf.path" value="${basedir}/cite/conf${test.type}.zip"/>
    </antcall>
  </target>
  
  <target name="user_conf" depends="init" if="dir.conf" unless="test.type">
    <mkdir dir="${basedir}/data"/>
    <copy todir="${basedir}/data" >
      <fileset dir="${dir.conf}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <zip destfile="${basedir}/cite/confUser.zip">
      <fileset dir="${basedir}">
	    <include name="data/**/*"/>
	  </fileset>
    </zip>
    <delete dir="${basedir}/data" failonerror="false"/>
    
    <antcall target="build-war">
      <param name="conf.path" value="${basedir}/cite/confUser.zip"/>
    </antcall>
    
    <delete file="${basedir}/cite/confUser.zip" failonerror="false"/>
  </target>

<!-- ====================================================================== -->
<!-- BUILD TARGETS                                                          -->
<!-- ====================================================================== -->

  <target name="war" depends="init, all">
    <!-- only one of the two will execute -->
    <antcall target="user_conf"/>
    <antcall target="misc_conf"/>
  </target>  
 <!-- BUILD WAR -->
  <target name="build-war" depends="init, all" if="conf.path">
    <!-- preparation -->
    <delete file="${basedir}/geoserver.war" 
            failonerror="false"/>
    <delete dir="${basedir}/data" 
            failonerror="false"/>
    <mkdir dir="${basedir}/data"/>
    <copy todir="${basedir}/data" >
      <fileset dir="${basedir}/documents">
        <include name="license.txt"/>
        <include name="geoserver.log"/>
        <include name="z3950-geo.map"/>
      </fileset>
    </copy>


    <!-- populate base directory -->
    <mkdir dir="${basedir}/data/capabilities"/>
    <copy todir="${basedir}/data/capabilities">
      <fileset dir="${basedir}/capabilities">
        <include name="*"/>
      </fileset>
    </copy>

    <mkdir dir="${basedir}/data/capabilities/wfs"/>
    <mkdir dir="${basedir}/data/capabilities/wfs/1.0.0"/>
    <copy todir="${basedir}/data/capabilities/wfs/1.0.0">
      <fileset dir="${basedir}/capabilities/wfs">
        <include name="*"/>
      </fileset>
    </copy>

    <mkdir dir="${basedir}/data/capabilities/filter/1.0.0"/>
    <copy todir="${basedir}/data/capabilities/filter/1.0.0">
      <fileset dir="${basedir}/capabilities/filter">
        <include name="*"/>
      </fileset>
    </copy>
    
    <mkdir dir="${basedir}/data/capabilities/gml/2.1.2"/>
    <copy todir="${basedir}/data/capabilities/gml/2.1.2">
      <fileset dir="${basedir}/capabilities/gml">
        <include name="*"/>
      </fileset>
    </copy>
    
    <mkdir dir="${basedir}/data/capabilities/validate"/>
    <copy todir="${basedir}/data/capabilities/validate">
      <fileset dir="${basedir}/capabilities/validate">
        <include name="*"/>
      </fileset>
    </copy>

    <unzip src="${conf.path}" dest="${basedir}"/>

    <copy todir="${dir.build}">
      <fileset dir="${basedir}/documents">
        <include name="log4j.properties"/>
      </fileset>
    </copy>

    <!-- war file -->
    <war warfile="${basedir}/geoserver.war" 
         webxml="${dir.webinf}/web.xml" 
         update="true">

      <!-- classes -->
      <classes dir="${dir.build}">
        <include name="**/servlets/**" />
        <include name="**/*.properties" />
        <exclude name="**/servlets/utilities/**" />
        <exclude name="**/EmbeddedTomcat.class" />
      </classes>

	  <classes dir="${dir.webinf}">
		<include name="ApplicationResources*.properties"/>
	  </classes>
            
      <webinf dir="${basedir}/data">
        <include name="services.xml"/>
        <include name="catalog.xml"/>
      </webinf>
      
      <webinf dir="${dir.webinf}">
		<exclude name="web.xml"/>
      </webinf>
      
      <!-- libraries -->
      <lib dir="${dir.lib}">
        <exclude name="**/junit.jar" />
        <exclude name="**/servlet.jar" />
      </lib>
      
      <!-- directories -->
      <fileset dir="${basedir}">
        <include name="data/**"/>
        <include name="documents/api/**"/>
        <exclude name="**/catalog.xml"/>
        <exclude name="**/services.xml"/>
      </fileset>
      
      <fileset dir="${dir.webinf}/pages">
      	<include name="index.jsp"/>
      	<include name="style.css"/>
      </fileset>
      <fileset dir="${dir.webinf}">
      	<include name="images/**"/>
      </fileset>
      
    </war>

    <!-- clean-up -->
    <delete file="${dir.build}/log4j.properties" failonerror="true"/>
    <delete dir="${basedir}/data" failonerror="true"/>
  </target>

<!-- DOCUMENTATION -->
<!-- generates all project documentation -->
  <target name="document" depends="init">
    <javadoc sourcepath="${dir.src}"
             destdir="${dir.doc}/api"
             private="true"
             windowtitle="GeoServer Documentation"
             stylesheetfile="${basedir}/documents/stylesheet.css"
             overview="${dir.src}/overview.html">
      <package name="org.vfny.geoserver.*"/>
      <package name="org.geotools.*"/>      
      <classpath>
        <fileset dir="${dir.lib}">
          <include name="*.jar"/>
          <exclude name="*/catalina/*"/>
        </fileset>
      </classpath>      
      <doctitle>
        <![CDATA[<h1>GeoServer Documentation</h1>]]>
      </doctitle>
      <bottom>
        <![CDATA[<i>Copyright &#169; 2002 The Open Planning Project.</i>]]>
      </bottom>

      <!-- link documents -->
      <link offline="true" 
            href="http://java.sun.com/xml/jaxb" 
            packagelistLoc="${dir.doc}/package-lists/jax-b"/>
      <link offline="true" 
            href="http://java.sun.com/products/jdk/1.2/docs/api/" 
            packagelistLoc="${dir.doc}/package-lists/jdk"/>
      <link offline="true" 
            href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/api/" 
            packagelistLoc="${dir.doc}/package-lists/servlet"/>
      <link offline="true" 
            href="http://java.sun.com/xml/sax" 
            packagelistLoc="${dir.doc}/package-lists/xerces"/>
      <link offline="true" 
            href="http://jakarta.apache.org/log4j/docs/api/" 
            packagelistLoc="${dir.doc}/package-lists/log4j"/>
    </javadoc>
  </target>


<!-- RELEASE -->
<!-- builds a release version of the application -->
  <target name="release-all" depends="release-binary, release-src"/>
  
  <target name="release-src" depends="clean">
    <delete file="${basedir}/geoserver-${name.release}-src.tar.gz" 
            failonerror="false"/>
    <delete file="${basedir}/geoserver-${name.release}-src.tar" 
            failonerror="false"/>
    <delete dir="${dir.build}" failonerror="false"/>
    
    <mkdir dir="${dir.build}"/>
    
    
    <unzip src="${basedir}/cite/confUserBasic.zip" dest="${basedir}"/>
    <copy todir="${dir.build}/conf">
	  <fileset dir="${basedir}/data">
	    <include name="**/*"/>
	  </fileset>
    </copy>
    <delete dir="${basedir}/data" failonerror="false"/>
    
    <copy todir="${dir.build}">
	  <fileset dir="${basedir}">
	    <include name="license.txt"/>
	    <include name="build.xml"/>
	    <include name=".classpath"/>
	  </fileset>
    </copy>
    <copy todir="${dir.build}">
	  <fileset dir="${basedir}/documents">
        <include name="license.txt"/>
	  </fileset>
    </copy>
    <copy todir="${dir.build}/src">
	  <fileset dir="${dir.src}">
	    <include name="**/*"/>
	    <exclude name="*CVS*/*"/>
	    <exclude name="**/*CVS*/*"/>
	  </fileset>
    </copy>
    <copy todir="${dir.build}/test">
	  <fileset dir="${dir.test}">
	    <include name="**/*"/>
	    <exclude name="*CVS*/*"/>
	    <exclude name="**/*CVS*/*"/>
	  </fileset>
    </copy>
    <copy todir="${dir.build}/lib">
	  <fileset dir="${dir.lib}">
	    <include name="**/*"/>
	    <exclude name="*CVS*/*"/>
	    <exclude name="**/*CVS*/*"/>
	  </fileset>
    </copy>
    <copy todir="${dir.build}/documents">
	  <fileset dir="${dir.doc}">
	    <include name="**/*"/>
	    <exclude name="*api*/*"/>
	    <exclude name="*api*/**/*"/>
	    <exclude name="*CVS*/*"/>
	    <exclude name="**/*CVS*/*"/>
	  </fileset>
    </copy>
    <copy todir="${dir.build}/bin">
	  <fileset dir="${dir.bin}">
	    <include name="**/*"/>
	    <exclude name="*CVS*/*"/>
	    <exclude name="**/*CVS*/*"/>
	  </fileset>
    </copy>
    <copy todir="${dir.build}/WEB-INF">
	  <fileset dir="${dir.webinf}">
	    <include name="**/*"/>
	    <exclude name="*CVS*/*"/>
	    <exclude name="**/*CVS*/*"/>
	  </fileset>
    </copy>
    <copy todir="${dir.build}/capabilities/">
	  <fileset dir="${basedir}/capabilities">
	    <include name="**/*"/>
	    <exclude name="*CVS*/*"/>
	    <exclude name="**/*CVS*/*"/>
	  </fileset>
    </copy>
    <copy todir="${dir.build}/cite/">
	  <fileset dir="${basedir}/cite">
	    <include name="**/*"/>
	    <exclude name="*CVS*/*"/>
	    <exclude name="**/*CVS*/*"/>
	  </fileset>
    </copy>

    <tar destfile="${basedir}/geoserver-${name.release}-src.tar">
	  <tarfileset dir="${dir.build}">
	    <include name="**/*"/>
	  </tarfileset>
	</tar>
	 	 
	<zip destfile="${basedir}/geoserver-${name.release}-src.zip">
	  <fileset dir="${dir.build}">
	    <include name="**/*"/>
	  </fileset>
	</zip>
	
    <delete dir="${dir.build}" failonerror="false"/>
	 	 
    <gzip src="geoserver-${name.release}-src.tar" 
          zipfile="geoserver-${name.release}-src.tar.gz"/>
    <copy file="${basedir}/geoserver-${name.release}-src.tar.gz" 
          todir="${dir.release}"/>
    <copy file="${basedir}/geoserver-${name.release}-src.zip" 
          todir="${dir.release}"/>

    <delete file="${basedir}/geoserver-${name.release}-src.tar.gz" 
            failonerror="true"/>
    <delete file="${basedir}/geoserver-${name.release}-src.zip" 
            failonerror="true"/>
    <delete file="${basedir}/geoserver-${name.release}-src.tar" 
            failonerror="true"/>
    <delete file="${basedir}/license.txt" failonerror="true"/>
  </target>
  
  <target name="release-binary" depends="clean">
    <antcall target="build-war">
      <param name="conf.path" value="${basedir}/cite/confUserBasic.zip"/>
    </antcall>
    <copy file="${basedir}/geoserver.war" 
          todir="${dir.release}"/>
  </target>

<!-- ====================================================================== -->
<!-- ADMIN TARGETS                                                          -->
<!-- ====================================================================== -->

<!-- GEOTOOLS JAR -->
<!-- builds geotools jar -->
  <target name="geotools" depends="init">
    <delete file="${dir.lib}/geotools.jar" failonerror="true"/>
    <jar jarfile="${dir.lib}/geotools.jar"
         whenempty="fail">
      <fileset dir="${dir.geotools}/core/target/classes/"
               includes="**/*.class"/>
      <fileset dir="${dir.geotools}/data/target/classes/"
               includes="**/*.class"/>                        
      <fileset dir="${dir.geotools}/defaultcore/target/classes/"
               includes="**/*.class"/>
      <fileset dir="${dir.geotools}/filter/target/classes/"
               includes="**/*.class"/>
      <fileset dir="${dir.geotools}/cts-coordtrans/target/classes/"
               includes="**/*.class"/>
      <fileset dir="${dir.geotools}/gcs-coverage/target/classes/"
               includes="**/*.class"/>          
      <fileset dir="${dir.geotools}/lite-rendering/target/classes/"
               includes="**/*.class"/>
      <fileset dir="${dir.geotools}/resources/target/classes/"
               includes="**/*.class"/>   
      <fileset dir="${dir.geotools}/sldstyling/target/classes/"
               includes="**/*.class"/>               
      <fileset dir="${dir.geotools}/svgsupport/target/classes/"
               includes="**/*.class"/>   
      <fileset dir="${dir.geotools}/opengis/target/classes/"
               includes="**/*.class"/>
      <fileset dir="${dir.geotools}/graph/target/classes/"
               includes="**/*.class"/>     
      <fileset dir="${dir.geotools}/validation/target/classes/">
      		<include name="**/*.class"/>
      		<include name="**/*.properties"/>
	  </fileset>              
    </jar>    
    
    <!-- I am not sure why this is not part of the geotools jar -->
    <delete file="${dir.lib}/gmldatasource-SNAPSHOT.jar" failonerror="true"/>    
    <jar jarfile="${dir.lib}/gmldatasource-SNAPSHOT.jar"
         whenempty="fail">
      <fileset dir="${dir.geotools}/gmldatasource/target/classes/"
               includes="**/*.class"/>
	</jar>

    <!-- Potgis support, include META-INF -->	
    <delete file="${dir.lib}/postgis-SNAPSHOT.jar" failonerror="true"/>        
	<jar jarfile="${dir.lib}/postgis-SNAPSHOT.jar"
         whenempty="fail">	
      <fileset dir="${dir.geotools}/postgis/target/classes/"/>
	</jar>
	
    <!-- Esri Shapefile support, include META-INF -->	
    <delete file="${dir.lib}/shapefile-SNAPSHOT.jar" failonerror="true"/>            
	<jar jarfile="${dir.lib}/shapefile-SNAPSHOT.jar"
         whenempty="fail">	
      <fileset dir="${dir.geotools}/shapefile/target/classes/"/>
	</jar>
	
    <!-- Oracle Spatial support, include META-INF -->		
    <delete file="${dir.lib}/oracle-spatial-SNAPSHOT.jar" failonerror="true"/>            
	<jar jarfile="${dir.lib}/oracle-spatial-SNAPSHOT.jar"
         whenempty="fail">	
      <fileset dir="${dir.geotools}/oraclespatial/target/classes/"/>
	</jar>	
	
    <!-- Java Property support, include META-INF -->		
    <delete file="${dir.lib}/property-SNAPSHOT.jar" failonerror="true"/>            
	<jar jarfile="${dir.lib}/property-SNAPSHOT.jar"
         whenempty="fail">	
      <fileset dir="${dir.geotools}/j2se-demos/target/classes/"
      	       includes="META-INF/**"/>
      <fileset dir="${dir.geotools}/j2se-demos/target/classes/"
      	       includes="geotools/data/**"/>
	</jar>
	
    <!-- Java Property support, include META-INF -->		
    <delete file="${dir.lib}/arcsde-SNAPSHOT.jar" failonerror="true"/>                
	<jar jarfile="${dir.lib}/arcsde-SNAPSHOT.jar"
         whenempty="fail">	
      <fileset dir="${dir.geotools}/arcsde/target/classes/"/>
	</jar>	
	
  </target>
</project>
