<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article>
  <title>GeoServer DataStore</title>

  <para>This document discusses all the connection parameters and
  configuration tricks needed to get each of the DataStores running. You
  should just need to look at one or two sections in it, based on the format
  of the data you would like to server with GeoServer. If there is any
  information, no matter how minor or even seemingly unrelated, that we are
  missing here that would have been helpful, please don't hesitate to email
  geoserver-devel@lists.sourceforge.net and let us know, since it is likely
  that someone else in the future will also want that information.</para>

  <section id="postgis">
    <title>PostGIS</title>

    <para>We used to say more about the installation about PostGIS, but the
    documentation on <ulink
    url="http://postgis.refractions.net">http://postgis.refractions.net</ulink>
    should be sufficient, and if not the PostGIS users list is the place to go
    for help. We do highly, highly recommend that you install <ulink
    url="http://geos.refractions.net">GEOS</ulink> before you install PostGIS,
    as it will speed up spatial queries in GeoServer, we automatically detect
    its presence and use it if available. If you are a windows users then you
    might check out Postgres 8, which as we write is at release candidate 1
    looking to be official quite soon. It should offer much, muc better
    windows support, including installers and running as a windows service.
    Check the <ulink url="http://www.postgresql.org">postgresql home
    page</ulink> for more information. The only way to run Postgres 7 is to
    use cygwin, which we highly recommend, but which can be a bitch to set up.
    PostGIS will work with both 7 and 8. If you are a windows user check out
    the <ulink url="http://dcmms.sourceforge.net/postgis_installer.php">dcmms
    source forge project</ulink>, which has a great PostGIS installer. If you
    have just installed PostGIS then we recommend connecting to it with the
    command line psql tool before testing with GeoServer, just to make sure
    that it works. When running it be sure to start it using the -i flag,
    which allows GeoServer (and other TCP/IP connections), should look
    something like:</para>

    <programlisting>postmaster -i -D /your/data/folder/location</programlisting>

    <para>Then fill out the PostGIS specific parameters as follows:</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <thead>
          <row>
            <entry align="center">Option Name</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>host</entry>

            <entry>Must match the PostGIS postmaster daemon URI exactly, port
            excluded. Can be a number or name - localhost or 127.0.0.1 if
            PostGIS is on the same machine as geoserver, if not it can
            reference the ip address or host name.</entry>
          </row>

          <row>
            <entry>port</entry>

            <entry>Must match the PostGIS postmaster daemon port exactly
            (generally 5432).</entry>
          </row>

          <row>
            <entry>database</entry>

            <entry>This is the name of the postgis database to connect to.
            Each PostGIS instance may run one or more databases, created with
            the createdb tool, and then spatially enabled by running the
            postgis.sql script. The database param must match the name of the
            database created.</entry>
          </row>

          <row>
            <entry>user</entry>

            <entry>The name of the user to connect to the database. Must have
            appropriate privileges on the database connecting to. Note that
            through this mechanism you can actually get finer control of
            transactions in GeoServer. You do this by creating a user that
            does not have transaction privileges on the database, and only
            letting GeoServer connect with that user. This will not be
            reflected in the Capabilities documents, but all attempted
            inserts, updates, and deletes will be rejected.</entry>
          </row>

          <row>
            <entry>passwd</entry>

            <entry>Must match the PostGIS database user password
            exactly.</entry>
          </row>

          <row>
            <entry>wkb enabled</entry>

            <entry>Sets whether the GeoTools library should use the faster
            Well Known Binary (WKB) format to read the PostGIS databse, or the
            more tested Well Known Text (WKT) format. At this point we believe
            WKB is well tested enough that we recommend using it, as it is
            more accurate and faster.</entry>
          </row>

          <row>
            <entry>loose bbox</entry>

            <entry>This is an option for speed in bbox requests, with a slight
            hit in accuracy. It uses a faster bounding box operation for
            requests to PostGIS, that just compares against the envelope of
            the geometry, instead of the full geometry. This means that a few
            comparisons could be slightly wrong. We recommend setting this to
            true if you're mostly using GeoServer for the WMS, as a few extra
            features do not hurt in the production of an image. For the WFS
            one should note that using a NOT DISJOINT filter will still be
            exactly accurate, it's only the BBOX filter, which is intended as
            a shortcut for NOT DISJOINT, that will be slightly off (and much
            faster).</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>Note that if you are using files directly, instead of the web admin
    tool, you will also have to make sure to fill out a 'dbtype' param equal
    to postgis (the web admin tool does this automatically)</para>
  </section>

  <section id="shapefile">
    <title>Shapefile</title>

    <para>For users who don't have a spatial database already set up and want
    to get GeoServer running quickly, we offer support for Shapefiles directly
    in GeoServer. You can even perform transactions against Shapefiles,
    modifying them through the WFS-T interface. But we do not really recommend
    it, as they weren't designed for such purposes. Any production instance of
    GeoServer should use a spatial database, PostGIS has a great shp2pgsql
    tool to easily turn your shapefiles into PostGIS tables. Thanks goes to
    the GeoTools team for this great contribution, and especially Ian
    Schneider, for getting things good to go for GeoServer.</para>

    <para>We are planning on redoing the way Shapefiles are added and stored
    in 1.3, as the method is a bit clunky, but we've finally got fixes in with
    1.2.4 to handle the most annoying shapefile problems of the past.</para>

    <para>The main field of the Shapefile DataStore is the url. A url is just
    a location, it need not be an online location (though it can be). In the
    case of shapefiles the most likely case is that you have the files
    somewhere on your computer. For GeoServer you have the choice of copying
    them into your GeoServer data directory, and referring to them relative to
    the base directory, or leaving them where they are and entering the url in
    your file system. The included sample shapefiles make use of the first
    way, but that's because we have no idea where you might put GeoServer, so
    can not refer to them on your file system, since we don't know the
    absolute location.</para>

    <para>All file url's that start with file:data/ are interpreted by
    GeoServer as relative ones. This means that GeoServer will figure out the
    root directory for you automatically. This is best for those wanting to
    transfer a GeoServer configuration to another computer, as you can just
    include all the Shapefiles that are needed and refer to them relatively.
    An example of this is the states shapefile, its url is:</para>

    <programlisting>file:data/featureTypes/states/states.shp </programlisting>

    <para>Note that the web admin tool does some magic as to where to place
    the files. If you are adding a new shapefile we recommend that you put it
    in the featureTypes directory named datastoreid_shapefileName where
    datastoreid is the value you assign it when you create the new datastore,
    and shapefileName is the name of the actual file. Doing this has the nice
    effect of creating the configuration files in the same directory as the
    actual shapefiles, and thus making all directly available for download
    from the same spot (if you don't do this everything will still work, the
    files will just be in different locations, unless you move the generated
    config files back to your shapefile directory). Which brings up the other
    nice effect of using the relative locations, users can directly download
    the shapefiles, by just accessing it through the web. Try going to:</para>

    <programlisting><ulink
        url="http://localhost:8080/geoserver/data/featureTypes/bc_roads/">http://localhost:8080/geoserver/data/featureTypes/bc_roads/</ulink></programlisting>

    <para>All the shapefiles are there, as well as the configuration files
    (note that the catalog.xml file, that contains sensitive passwords, is not
    accessible through the web, which is by design). In the future we are
    considering making GeoServer more of a full data distribution server,
    where it would make all layers (even database ones) available for direct
    download with generated shapefiles (link to jira). But for now any
    shapefile you put up will be available for download.</para>

    <para>If you specifically don't want your shapefile available for
    download, then we recommend just inputting its absolute path. This is done
    differently on linux and windows file systems. On windows you would
    specify the url as something like:</para>

    <programlisting>file:/C:/Documents and Settings/Chris/My Documents/shapefiles/states.shp</programlisting>

    <para>Notice the drive letter is specified, followed by a typical file
    path.</para>

    <para>In Linux you would not specify the drive letter, just the location
    on the file system:</para>

    <programlisting>file:/home/cholmes/shapefiles/states.shp</programlisting>

    <para>Note that a consequence of using the Url is that you actually can
    refer to a shapefile that is online. We certainly don't recommend it, you
    should instead download the file to the same computer GeoServer is running
    on, so you're not sending network requests every time. But it is an
    interesting example of how you can spread your resources around and have
    GeoServer centralize them and share them with the world.</para>

    <para>There are two other optional parameters for Shapefiles. The memory
    mapped buffer should generally be set to true, it's more for programmers.
    The dbf charset parameter specifies a Character Set to be used to read the
    DBF file (the file that contains the attributes of the Shapefile). The
    default is ISO-8859-1.</para>

    <section id="indexed-shapefile">
      <title>Indexed Shapefile</title>

      <para>A recent contribution by Tomasso Nolli has given some nice speed
      increases for Shapefiles with spatial queries. He wrote an open source
      spatial index, which is built when on the first start up. ESRI does have
      spatial indexes on their shapefiles, but they keep that part of the
      'open' shapefile specification private. So the indexed shapefile
      provides a nice way to get spatial filters to work faster. Right now it
      is available in the DataStore extras section, just download it and
      replace the old gt2-shapefile jar in
      geoserver/server/geoserver/WEB-INF/lib/. Then make sure that you set the
      index parameter to true. For more details please download the file from
      the DataStore Extras section, <ulink
      url="http://sourceforge.net/project/showfiles.php?group_id=25086&amp;package_id=129885&amp;release_id=271218">here</ulink>.
      It will have complete instructions on how to install it. This will be a
      default for 1.3.</para>
    </section>
  </section>

  <section id="arcsde">
    <title>ArcSDE</title>

    <para>ArcSDE is the least supported of the main GeoServer DataStores,
    mostly due to the expense and license limitations of setting up ArcSDE
    instances. We have also found their connection drivers a bit buggy (and
    the source is closed so we can't just fix them ourselves), and have also
    encountered problems that only seem to manifest themselves in certain
    instances, leading us to do some complicated work arounds. We suspect the
    differing problems have to do with the backend data format, but could be
    different versions of ArcSDE. The DataStore was contributed by and
    maintained by Gabriel Roldán, testing against ArcSDE 8.3. We got a number
    of good bugs fixed for 1.2.3, so please let us know if you encounter
    problems, and we will do our best to fix them.</para>

    <para>To connect to an ArcSDE instance you must have the following
    parameters:</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <thead>
          <row>
            <entry align="center">Option Name</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>server</entry>

            <entry>The machine which the ArcSDE instance is running
            on.</entry>
          </row>

          <row>
            <entry>port</entry>

            <entry>The port the ArcSDE instance is running on. The default is
            1521</entry>
          </row>

          <row>
            <entry>instance</entry>

            <entry>The ArcSDE instance name</entry>
          </row>

          <row>
            <entry>user</entry>

            <entry>The name of the user to connect with.</entry>
          </row>

          <row>
            <entry>passwd</entry>

            <entry>The password of the user you are connecting with.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>As with PostGIS and Oracle configuration of the files directly also
    needs a 'dbtype' parameter equal to 'arcsde'.</para>

    <para>There are also a number of optional parameters to configure the
    ArcSDE connection 'pool'. GeoTools makes use of a number of connections,
    but does a decent job of managing them, so that new connections need not
    be made for each request. The big reason for this is that some ArcSDE
    licenses only allow a limited number of connections, so these values can
    be adjusted to minimize the number of simultaneous connections. GeoTools
    will share the active connections instead of making new ones. Right now it
    requires at least two connections, as we were having some nasty bugs with
    ArcSDE connections going stale (only with certain instances, and only with
    spatial queries, which made debugging a big hassle). With some funded
    development work this could easily be improved, ArcSDE could definitely
    benefit from some more effort. If you have more connections available we
    do recommend upping the pool.maxConnections parameter. The meaning of
    these optional parameters is as follows:</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <thead>
          <row>
            <entry align="center">Option Name</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>pool.minConnections</entry>

            <entry>The number of connections the pool makes on start up. If
            needed these will be incremented.</entry>
          </row>

          <row>
            <entry>pool.maxConnections</entry>

            <entry>The maximum number of connections that a pool is allowed to
            make. This should be as high as possible, but there may be license
            limitations.</entry>
          </row>

          <row>
            <entry>pool.increment</entry>

            <entry>The number of new connections to add to the pool when
            incrementing. One is most likely fine.</entry>
          </row>

          <row>
            <entry>pool.timeOut</entry>

            <entry>The amount of time that a connection request should wait
            for an unused connection before failing.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>For ArcSDE 8.3 GeoServer includes the jsde_sdk.8.3.jar with
    installation, and no additional jars should be needed. ArcSDE 9 has also
    been recently tested, it requires an upgrade to the java sdk, you must
    replace jsde_sdk-8.3.jar in the GeoServer lib directory with the
    equivalent from SDE 9. We have not found it publicly distributed yet, once
    we do we will add it to the default GeoServer download.</para>

    <para>ArcSDE 9 has also been recently tested, it requires an upgrade to
    the java sdk, you must replace jsde_sdk-8.3.jar in the GeoServer lib
    directory with the equivalent from SDE 9. We have not found it publicly
    distributed yet, once we do we will add it to the default GeoServer
    download.</para>

    <para>One more thing to note is that in the info.xml file the &lt;name&gt;
    parameter of the featureType may need to be the full qualified type name.
    It should be &lt;instance&gt;.&lt;table_owner&gt;.&lt;table_name&gt;, so
    in the example above a table called roads should be named
    sde.testsde.roads. But some users have also reported success without the
    instance prepended. Also make sure that the port number specified is the
    same as in the services file
    (%(%(%systemRoot%\system32\drivers\etc\services in windows), it should
    contain a line like (if yours is different then change the port param of
    your datastore definition):<programlisting>esri_sde
    5151/tcp</programlisting></para>
  </section>

  <section id="mysql">
    <title>MySQL</title>

    <para>We don't have time to get a full section in for MySQL for 1.2.4, but
    it is also still a <ulink
    url="http://sourceforge.net/project/showfiles.php?group_id=25086&amp;package_id=129885&amp;release_id=271218">DataStore
    Extension</ulink>. So please just go to the DataStore Extension download
    page, and then unzip the MySQL file that you download, and it will have
    complete instructions on configuring and installing MySQL with
    GeoServer.</para>
  </section>

  <section id="oracle">
    <title>Oracle</title>

    <para>GeoServer also offers Oracle Spatial support, contributed by Sean
    Geoghegan, and currently searching for a new maintainer. It includes
    native support of all OGC filters, connection pooling, and transactional
    capabilities. Please check the wiki for the latest information on
    oracle.</para>

    <para>We are no longer dependent on the sdoapi jar, thanks to some nice
    work done by Refractions Research. There is still one jar file that we can
    not distribute, the driver for the JDBC connection to Oracle, it should be
    called ojdbc14.jar. This is targeted at java 1.4, which is required by
    GeoServer. We have also found that classes12.jar works as well, the main
    class it needs to have is oracle.jdbc.driver.OracleDriver. If you are
    installing GeoServer on the same computer that is running GeoServer you
    should be able to find the jar at $ORACLE_HOME/jdbc/lib It is also readily
    available from the Oracle Technology Network here. Just place the jar in
    the geoserver/server/geoserver/WEB-INF/lib/ directory of a geoserver
    binary install. Once the jar is in the directory then Oracle Spatial
    Database and Oracle Spatial with OCI (thick) connection should be options
    from the drop down menu when creating a new datastore.</para>

    <para>There is a choice in the type of connection that you use to connect
    to GeoServer. The standard 'Oracle Spatial Database' connection uses a
    completely portable JDBC library, that runs as a thin client on any
    computer. If you don't have Oracle installed on your computer, and/or are
    not an Oracle expert and know exactly how an OCI connection works, then we
    recommend you use this one.</para>

    <para>Often GeoServer will be installed on a computer that has all the OCI
    (Oracle Call Interface) drivers needed for a thick connection (such as
    when installed on the same computer as the database). In this case the
    thick driver is preferable, as it leads to a nice speed increase. It
    should come up as an option on the new datastore menu, it has a few
    parameters different from the standard Oracle Spatial connection. Instead
    of taking a host, port, and instance params it uses an 'alias'. This alias
    can be found in $ORACLE_HOME/network/admin/tnsnames.ora. Note that if you
    are using the OCI you must use the classes12.jar or ojdbc14.jar found in
    your $ORACLE_HOME/jdbc/lib directory.</para>

    <para>All Oracle DataStores make use of the following parameters:</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <thead>
          <row>
            <entry align="center">Option Name</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>user</entry>

            <entry>The name of the user to connect to the database. Must have
            appropriate privileges on the database connecting to. Note that
            through this mechanism you can actually get finer control of
            transactions in GeoServer. You do this by creating a user that
            does not have transaction privileges on the database, and only
            letting GeoServer connect with that user. This will not be
            reflected in the Capabilities documents, but all attempted
            inserts, updates, and deletes will be rejected.</entry>
          </row>

          <row>
            <entry>passwd</entry>

            <entry>The password for the user you are connecting with.</entry>
          </row>

          <row>
            <entry>dbtype</entry>

            <entry>Must be 'oracle' to use the oracle datastore. (only needed
            when working directly with the config files directly, the web
            admin tool takes care of this for you)</entry>
          </row>

          <row>
            <entry>schema</entry>

            <entry>An optional field to specify which schema the tables should
            be found in.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>Additionally, a standard JDBC connection will make use of the
    following parameters to specify the machine that Oracle is running on, and
    the port and instance to connect to.</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <thead>
          <row>
            <entry align="center">Option Name</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>host</entry>

            <entry>The machine on which oracle is running. Can be a number or
            name - for example localhost or 127.0.0.1 if Oracle is on the same
            machine as geoserver, if not it can reference the ip address or
            host name.</entry>
          </row>

          <row>
            <entry>port</entry>

            <entry>The port the Oracle instance is running on. The default is
            152.</entry>
          </row>

          <row>
            <entry>instance</entry>

            <entry>The Oracle instance name, should be the same as the SERVICE
            ID.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>An OCI connection does not need that information, it uses the
    'alias', which contains all the connection information, and indeed is
    specially configured for it. As we mentioned earlier this alias can be
    found in</para>

    <programlisting>$ORACLE_HOME/network/admin/tnsnames.ora</programlisting>

    <para>We have also had some success with leaving the alias as an empty
    string, it seems to find the appropriate default.</para>

    <para>So the param is:</para>

    <informaltable>
      <tgroup cols="2">
        <colspec align="left" colwidth="100" />

        <thead>
          <row>
            <entry align="center">Option Name</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>alias</entry>

            <entry>The connection alias from tnsnames.ora used to connect
            with.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>To get your featureTypes working properly the oracle spatial table
    you are using must have a correct entry in the USER_SDO_GEOM_METADATA
    table (now works in ALL_SDO_GEOM_METADATA view, so different users than
    the owner can connect). And whatever table you use MUST have a primary key
    declared, it will not work otherwise. We have also seen problems using
    spatial filters when a spatial index is not defined, so if everything but
    spatial filters work it may just be that the spatial index is not defined
    for the table.</para>

    <para>A nice little tool to help out figuring out if your oracle instance
    can be connected to and what the parameters are is lsnrctl. If you can run
    it I believe that means that your oracle instance will accept a connection
    from geoserver. And it is also useful for figuring out the hostname - mine
    would not accept 'localhost' or '127.0.0.1' (this is with 10g and windows
    xp), it needed the name of my computer, which was given by the lsnrctl
    program, with the services command. The 'status' command will also tell if
    geoserver is connected to your oracle instance. Also note that if you are
    working directly with the geoserver configuration files the name element
    in the info.xml file to specify the featureType must be all capitalized,
    as the JDBC driver does not recognize the table otherwise. This also means
    that when you request the features from GeoServer you must use upper
    cases. If specifying attributes in the schema.xml file they must also be
    all capitalized. Oracle does not use cases, but things seem to work better
    all around if all upper case letters are used.</para>
  </section>
</article>